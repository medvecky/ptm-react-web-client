{"version":3,"sources":["task.status.enum.ts","components/CreateTaskForm/CreateTaskForm.tsx","components/NavBar.tsx","components/EditTaskStatusForm.tsx","components/TaskForm.tsx","store/projectsSlice.ts","components/TasksList/TasksList.tsx","components/TasksList/TaskListFunction.ts","components/ProjectForm.tsx","components/ProjectsList.tsx","components/ListsContainer.tsx","components/CreateProjectForm/CreateProjectForm.tsx","components/EditTaskForm/EditTaskForm.tsx","components/EditProjectForm/EditProjectForm.tsx","components/NavBarNoAuth.tsx","components/SignInForm/SignInForm.tsx","components/SignUpForm/SignUpForm.tsx","axios.config.ts","components/EditTaskProjectForm/EditTaskProjectForm.tsx","store/systemSlice.ts","store/tasksSlice.ts","components/PTMContainer/PTMContainer.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["TaskStatus","CreateTaskForm","props","titleInputRef","useRef","descriptionInputRef","projectInputRef","selectProjectFormControl","projects","map","project","value","id","title","Card","className","border","text","Form","onSubmit","event","preventDefault","createTaskDto","current","description","projectId","onCreateTask","Group","controlId","Label","Control","type","placeholder","required","ref","as","custom","error","Body","Button","variant","size","NavBar","history","useHistory","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavLink","to","exact","NavDropdown","Item","Divider","onClick","onSignOut","push","EditTaskStatusForm","statusRef","style","width","margin","padding","editTaskDto","task","status","changeVisibility","projectName","defaultValue","OPEN","IN_PROGRESS","DONE","TaskForm","useState","isEditable","setEditable","displayForm","onEdit","onChangeTaskStatus","Title","color","Text","beginDate","endDate","onDeleteTask","bind","projectsSlice","createSlice","name","initialState","filter","reducers","setProjects","state","action","payload","setProjectsFilter","clearProjectFilter","actions","selectProjectsProjects","selectProjectsFilter","TasksList","tasks","projectFilter","statusFilter","useSelector","taskListElements","undefined","find","Row","key","Container","maxWidth","Badge","ProjectForm","dispatch","useDispatch","onDeleteProject","ProjectsList","items","onEditProject","ListsContainer","Col","xs","sm","lg","deleteTaskHandler","changeTaskStatusHandler","deleteProjectHandler","editProjectHandler","CreateProjectForm","createProjectDto","onCreateProject","EditTaskForm","titleRef","descriptionRef","EditProjectForm","editProjectDto","NavBarNoAuth","SignInForm","emailInputRef","passwordInputRef","email","password","onSingIn","SignUpForm","confirmPasswordInputRef","setError","onSingUp","instance","axios","create","baseURL","EditTaskProjectForm","selected","onEditTaskProject","onDeleteTaskProject","systemSlice","token","isChangedFlag","clearError","clearToken","setToken","setChangedFlag","selectSystemError","system","selectSystemToken","selectSystemIsChanged","tasksSlice","setTasks","selectTasksTasks","withRouter","changeFlag","systemError","useEffect","get","headers","Authorization","then","response","data","catch","toString","addTaskHandler","createTaskWithProject","createTask","post","message","addProjectHandler","editTaskHandler","patch","editTaskProjectHandler","taskId","put","deleteTaskProjectHandler","delete","signInHandler","username","accessToken","signUpHandler","path","component","match","params","from","App","Boolean","window","location","hostname","configureStore","reducer","systemReducer","tasksReducer","projectsReducer","ReactDOM","render","store","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7d23ce95.chunk.js","sourcesContent":["export enum TaskStatus {\n    OPEN = 'OPEN',\n    IN_PROGRESS = 'IN_PROGRESS',\n    DONE = 'DONE'\n}","import React, {useRef} from 'react';\nimport './CreateTask.css';\nimport {Form, Button, Card} from 'react-bootstrap';\nimport {CreateTaskDto} from \"../../create-task.dto\";\nimport {Project} from \"../../project.model\";\ninterface CreateTaskProps {\n    onCreateTask: (createTaskDto: CreateTaskDto) => void;\n    error: string;\n    projects: Project [];\n}\n\nconst CreateTaskForm: React.FC<CreateTaskProps> = props => {\n    const titleInputRef = useRef<HTMLInputElement>(null);\n    const descriptionInputRef = useRef<HTMLInputElement>(null);\n    const projectInputRef = useRef<HTMLSelectElement>(null);\n    const createTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const createTaskDto: CreateTaskDto = {\n            title: titleInputRef.current!.value,\n            description: descriptionInputRef.current!.value,\n            projectId: projectInputRef.current!.value\n        };\n        props.onCreateTask(createTaskDto);\n    };\n\n    const selectProjectFormControl = props.projects.map(project =>\n        <option value={project.id}>{project.title}</option>\n    );\n\n    return (\n        <Card\n            className='CreateTask'\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={createTaskHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter task's title\" required ref={titleInputRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Enter task's description\" required ref={descriptionInputRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formProject\">\n                    <Form.Label>Project</Form.Label>\n                    <Form.Control as=\"select\" custom ref={projectInputRef}>\n                        <option value = ''>none</option>\n                        {selectProjectFormControl}\n                    </Form.Control>\n                </Form.Group>\n                { props.error &&\n                    <Form.Group controlId=\"error\">\n                        <Card border='danger' text='danger'>\n                            <Card.Body>  {props.error} </Card.Body>\n                        </Card>\n                    </Form.Group>\n                }\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Create task\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default CreateTaskForm;","import React from 'react';\nimport {Button, Nav, Navbar, NavDropdown} from \"react-bootstrap\";\nimport {NavLink, useHistory} from 'react-router-dom';\n\ninterface  NavBarProps {\n    onSignOut: () => void\n}\n\nconst NavBar: React.FC<NavBarProps> = (props) => {\n    const history = useHistory();\n\n    const signOutHandler = () => {\n        props.onSignOut();\n        history.push('/');\n    };\n\n    return (\n        <Navbar bg=\"info\" variant='dark' expand='md'>\n            <Navbar.Brand href=\"#home\">PTM</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link\n                        as={NavLink}\n                        to='/'\n                        exact\n                    >\n                        Home\n                    </Nav.Link>\n                    <Nav.Link as={NavLink} to='/new-task'>New Task</Nav.Link>\n                    <Nav.Link as={NavLink} to='/new-project'>New Project</Nav.Link>\n                    <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#action/3.1\">Reports</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                        <NavDropdown.Divider/>\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n                <Nav>\n                    <Button\n                        variant=\"outline-light\"\n                        type=\"submit\" size='sm'\n                        onClick={signOutHandler}\n                    >\n                       Sign Out\n                    </Button>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n\nexport default NavBar;","import React, {useRef} from \"react\";\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Task} from \"../task.model\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {TaskStatus} from \"../task.status.enum\";\n\ninterface EditTaskStatusProps {\n    task: Task;\n    onSubmit: (editTaskDto: EditTaskDto) => void;\n    changeVisibility: () => void;\n    projectName: string;\n}\n\nconst EditTaskStatusForm: React.FC<EditTaskStatusProps> = (props) => {\n    const statusRef = useRef<HTMLSelectElement>(null);\n    const editTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editTaskDto: EditTaskDto = {\n            id: props.task.id,\n            title: props.task.title,\n            description: props.task.description,\n            status: statusRef.current!.value,\n            projectId: props.task.projectId\n        };\n        props.onSubmit(editTaskDto);\n        props.changeVisibility();\n    };\n    return (\n        <Card\n            style={{\n                width: '100%',\n                margin: '1%',\n                padding: '2%'\n            }}\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editTaskHandler}>\n                <Form.Group>\n                    <Form.Label>{props.task.title}</Form.Label>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>{props.task.description}</Form.Label>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>{props.projectName}</Form.Label>\n                </Form.Group>\n                <Form.Group controlId=\"formStatus\">\n                    <Form.Control as=\"select\" defaultValue={props.task.status} ref={statusRef}>\n                        <option>{TaskStatus.OPEN}</option>\n                        <option>{TaskStatus.IN_PROGRESS}</option>\n                        <option>{TaskStatus.DONE}</option>\n                    </Form.Control>\n                </Form.Group>\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditTaskStatusForm;","import React, {useState} from 'react';\nimport {Card, Button} from \"react-bootstrap\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {Task} from \"../task.model\";\nimport {Link} from \"react-router-dom\";\nimport EditTaskStatusForm from \"./EditTaskStatusForm\";\n\ninterface TaskProps {\n    task: Task;\n    onDeleteTask: (taskId: string) => void;\n    onChangeTaskStatus: (editTaskDto: EditTaskDto) => void;\n    projectName: string;\n}\n\nconst TaskForm: React.FC<TaskProps> = props => {\n    const [isEditable, setEditable] = useState<boolean>(false);\n    let displayForm = null;\n    const onEdit = () => {\n        setEditable(!isEditable);\n    };\n\n    if (isEditable) {\n        displayForm = (\n            <EditTaskStatusForm\n                task={props.task}\n                onSubmit={props.onChangeTaskStatus}\n                changeVisibility={onEdit}\n                projectName={props.projectName}\n            />);\n\n    } else {\n        displayForm = (\n            <Card\n                border=\"info\"\n                text=\"info\"\n            >\n                <Card.Body>\n                    <Card.Title\n                        as={Link}\n                        to={'/task/' + props.task.id}\n                        style={{\n                            color: \"lightseagreen\"\n                        }}\n                    >\n                        {props.task.title}\n                    </Card.Title>\n                    <Card.Text>\n                        {props.task.description}\n                    </Card.Text>\n                    {props.task.projectId &&\n                    <Card.Text\n                        as={Link}\n                        to={`/task/${props.task.id}/project`}\n                        style={{\n                            color: \"lightseagreen\"\n                        }}\n                    >\n                        {props.projectName}\n                    </Card.Text>\n                    }\n\n                    { !props.task.projectId &&\n                    <Card.Text\n                        as={Link}\n                        to={`/task/${props.task.id}/project`}\n                        style={{\n                            color: \"lightseagreen\"\n                        }}\n                    >\n                        Add Project\n                    </Card.Text>\n                    }\n                    <Card.Text>\n                        {props.task.status}\n                    </Card.Text>\n                    {props.task.beginDate &&\n                    <Card.Text>\n                        Begin: {props.task.beginDate}\n                    </Card.Text>\n                    }\n                    {props.task.endDate &&\n                    <Card.Text>\n                        End: {props.task.endDate}\n                    </Card.Text>\n                    }\n                    <Button\n                        style={{margin: '1%'}}\n                        variant=\"outline-info\"\n                        onClick={() => onEdit()}\n                        size='sm'\n                    >\n                        Change Status\n                    </Button>\n                    <Button\n                        variant=\"outline-info\"\n                        onClick={props.onDeleteTask.bind(null, props.task.id)}\n                        size='sm'\n                    >\n                        Delete\n                    </Button>\n                </Card.Body>\n            </Card>\n        );\n    }\n    return (\n        <div style={{\n            width: '100%',\n            margin: '1%'\n        }}>\n            {displayForm}\n        </div>\n    );\n};\n\nexport default TaskForm;","import {createSlice} from '@reduxjs/toolkit';\n\nexport const projectsSlice = createSlice(\n    {\n        name: 'projects',\n        initialState: {\n            projects: [],\n            filter: ''\n        },\n        reducers: {\n            setProjects: (state, action) => {\n                state.projects = action.payload;\n            },\n\n            setProjectsFilter: (state, action) => {\n                state.filter = action.payload;\n            },\n\n            clearProjectFilter: state => {\n                state.filter = '';\n            }\n        }\n    }\n);\n\nexport const {setProjects, setProjectsFilter, clearProjectFilter} = projectsSlice.actions;\n\n// @ts-ignore\nexport const selectProjectsProjects = state => state.projects.projects;\n// @ts-ignore\nexport const selectProjectsFilter = state => state.projects.filter;\n\nexport default projectsSlice.reducer;\n","import React from 'react';\nimport TaskForm from \"../TaskForm\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport {Container, Row, Badge} from 'react-bootstrap';\nimport {Task} from \"../../task.model\";\nimport {filterTasks} from \"./TaskListFunction\";\nimport {Project} from \"../../project.model\";\nimport {useSelector} from 'react-redux';\nimport {selectProjectsFilter} from \"../../store/projectsSlice\";\n\ninterface TasksListProps {\n    // @ts-ignore\n    tasks: Task [];\n    projects: Project [];\n    onDeleteTask: (taskId: string) => void;\n    onChangeTaskStatus: (editTaskDto: EditTaskDto) => void;\n    status: string;\n}\n\n\nconst TasksList: React.FC<TasksListProps> = props => {\n\n    const project = useSelector(selectProjectsFilter);\n\n    const taskListItems = filterTasks(props.tasks, project, props.status);\n\n    const taskListElements = taskListItems.map(task => {\n\n        const project = props.projects.find(project => project.id === task.projectId);\n\n        const projectName = project?.title || '';\n\n        return (<Row key={task.id}>\n            <TaskForm\n                task={task}\n                onDeleteTask={props.onDeleteTask}\n                onChangeTaskStatus={props.onChangeTaskStatus}\n                projectName={projectName}\n            />\n        </Row>)\n    });\n\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            <Row>\n                <h4><Badge variant=\"info\">{props.status}</Badge></h4>\n            </Row>\n            {taskListElements}\n        </Container>\n    );\n};\n\nexport default TasksList;","import {Task} from \"../../task.model\";\n\nexport function filterTasks(tasks: Task [], projectFilter: string, statusFilter: string) {\n\n    let result;\n\n    if (projectFilter) {\n        if (projectFilter === '-') {\n            result = tasks\n                .filter(task => task.status === statusFilter)\n                .filter(task => task.projectId === undefined);\n        } else {\n            result = tasks\n                .filter(task => task.status === statusFilter)\n                .filter(task => task.projectId === projectFilter);\n        }\n    } else {\n        result = tasks.filter(task => task.status === statusFilter);\n    }\n    return result;\n}","import React from 'react';\nimport {Card, Button} from \"react-bootstrap\";\nimport {Project} from \"../project.model\";\nimport {EditProjectDto} from \"../edit-project.dto\";\nimport {Link} from \"react-router-dom\";\nimport {useDispatch} from \"react-redux\";\nimport {setProjectsFilter} from '../store/projectsSlice'\n\ninterface ProjectProps {\n    project: Project;\n    onDeleteProject: (projectId: string) => void;\n    onEditProject: (editProjectDto: EditProjectDto) => void;\n}\n\nconst ProjectForm: React.FC<ProjectProps> = props => {\n    const dispatch = useDispatch();\n    return (\n        <Card\n            border=\"info\"\n            text=\"info\"\n        >\n            <Card.Body>\n                <Card.Title\n                    onClick={() => dispatch(setProjectsFilter(props.project.id))}\n                >\n                    {props.project.title}\n                </Card.Title>\n                <Card.Text>\n                    {props.project.description}\n                </Card.Text>\n                <Button\n                    as={Link}\n                    to={'/project/' + props.project.id}\n                    variant=\"outline-info\"\n                    size='sm'\n                >\n                    Edit\n                </Button>\n                <Button\n                    variant=\"outline-info\"\n                    onClick={props.onDeleteProject.bind(null, props.project.id)}\n                    size='sm'\n                >\n                    Delete\n                </Button>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default ProjectForm;","import React from 'react';\nimport {Container, Row, Badge, Button} from 'react-bootstrap';\nimport {EditProjectDto} from \"../edit-project.dto\";\nimport ProjectForm from \"./ProjectForm\";\nimport {Project} from \"../project.model\";\nimport {useDispatch} from 'react-redux';\nimport {setProjectsFilter} from '../store/projectsSlice'\n\ninterface ProjectsListProps {\n    // @ts-ignore\n    items: Project [];\n    onDeleteProject: (projectId: string) => void;\n    onEditProject: (editProjectDto: EditProjectDto) => void;\n}\n\nconst ProjectsList: React.FC<ProjectsListProps> = props => {\n\n    const dispatch = useDispatch();\n\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            <Row>\n                <h4><Badge variant=\"info\">PROJECTS</Badge></h4>\n            </Row>\n            <Row>\n                <Row>\n                    <Button\n                        style={{margin: '1px'}}\n                        variant=\"outline-info\"\n                        size='sm'\n                        onClick={() => dispatch(setProjectsFilter(''))}\n                    >\n                        Clear Filter\n                    </Button>\n                    <Button\n                        style={{margin: '1px'}}\n                        variant=\"outline-info\"\n                        size='sm'\n                        onClick={() => dispatch(setProjectsFilter('-'))}\n                    >\n                        Tasks without project\n                    </Button>\n                </Row>\n            </Row>\n            {props.items\n                .map(project =>\n                    <Row key={project.id}>\n                        <ProjectForm\n                            project={project}\n                            onDeleteProject={props.onDeleteProject}\n                            onEditProject={props.onEditProject}\n                        />\n                    </Row>)}\n        </Container>\n    );\n};\n\nexport default ProjectsList;","import React from \"react\";\nimport {Card, Col, Container, Row} from \"react-bootstrap\";\nimport TasksList from \"./TasksList/TasksList\";\nimport ProjectsList from \"./ProjectsList\";\nimport {Task} from \"../task.model\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {Project} from \"../project.model\";\nimport {EditProjectDto} from \"../edit-project.dto\";\n\ntype ListsContainerProps = {\n    tasks: Task [];\n    projects: Project [];\n    deleteTaskHandler: (taskId: string) => void;\n    changeTaskStatusHandler: (editTaskDto: EditTaskDto) => void;\n    deleteProjectHandler: (projectId: string) => void;\n    editProjectHandler: (editProjectDto: EditProjectDto) => void;\n    error: string;\n}\n\nconst ListsContainer: React.FC<ListsContainerProps> = (props) => {\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            {props.error &&\n                <Row>\n                    <Card border='danger' text='danger'>\n                        <Card.Body>  {props.error} </Card.Body>\n                    </Card>\n                </Row>\n            }\n            <Row>\n                <Col xs={10} sm={3} lg={3}>\n                    <TasksList\n                        status='OPEN'\n                        tasks={props.tasks}\n                        projects={props.projects}\n                        onDeleteTask={props.deleteTaskHandler}\n                        onChangeTaskStatus={props.changeTaskStatusHandler}\n                    />\n                </Col>\n                <Col xs={10} sm={3} lg={3}>\n                    <TasksList\n                        status='IN_PROGRESS'\n                        tasks={props.tasks}\n                        projects={props.projects}\n                        onDeleteTask={props.deleteTaskHandler}\n                        onChangeTaskStatus={props.changeTaskStatusHandler}\n                    />\n                </Col>\n                <Col xs={10} sm={3} lg={3}>\n                    <TasksList\n                        status='DONE'\n                        tasks={props.tasks}\n                        projects={props.projects}\n                        onDeleteTask={props.deleteTaskHandler}\n                        onChangeTaskStatus={props.changeTaskStatusHandler}\n                    />\n                </Col>\n                <Col xs={10} sm={3} lg={3}>\n                    <ProjectsList\n                        items={props.projects}\n                        onDeleteProject={props.deleteProjectHandler}\n                        onEditProject={props.editProjectHandler}\n                    />\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default ListsContainer;","import React, {useRef} from 'react'\nimport './CreateProjectForm.css'\nimport {Form, Button, Card} from 'react-bootstrap';\nimport {CreateProjectDto} from \"../../create-project.dto\";\ninterface CreateProjectProps {\n    onCreateProject: (createProjectDto: CreateProjectDto) => void;\n    error: string;\n}\n\nconst CreateProjectForm: React.FC<CreateProjectProps> = props => {\n    const titleInputRef = useRef<HTMLInputElement>(null);\n    const descriptionInputRef = useRef<HTMLInputElement>(null);\n    const createProjectHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const createProjectDto: CreateProjectDto = {\n\n            title: titleInputRef.current!.value,\n            description: descriptionInputRef.current!.value,\n        };\n        props.onCreateProject(createProjectDto);\n    };\n    return (\n            <Card\n                className='CreateProjectForm'\n                border=\"info\"\n                text=\"info\"\n            >\n                <Form onSubmit={createProjectHandler}>\n                    <Form.Group controlId=\"formTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter project's title\" required ref={titleInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter projects's description\" ref={descriptionInputRef}/>\n                    </Form.Group>\n                    { props.error &&\n                    <Form.Group controlId=\"error\">\n                        <Card border='danger' text='danger'>\n                            <Card.Body>  {props.error} </Card.Body>\n                        </Card>\n                    </Form.Group>\n                    }\n                    <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                        Create Project\n                    </Button>\n                </Form>\n            </Card>\n    );\n};\n\nexport default CreateProjectForm;","import React, {useRef} from \"react\";\nimport './EditTaskForm.css'\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Task} from \"../../task.model\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport {Project} from \"../../project.model\";\n\ninterface EditTaskProps {\n    task: Task;\n    onSubmit: (editTaskDto: EditTaskDto) => void;\n    projects: Project [];\n    error: string;\n}\n\nconst EditTaskForm: React.FC<EditTaskProps> = (props) => {\n    const titleRef = useRef<HTMLInputElement>(null);\n    const descriptionRef = useRef<HTMLInputElement>(null);\n\n    const project = props.projects.find(project => project.id === props.task.projectId);\n\n    const projectName = project?.title || '';\n\n    const editTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editTaskDto: EditTaskDto = {\n            id: props.task.id,\n            title: titleRef.current!.value,\n            description: descriptionRef.current!.value,\n            status: props.task.status,\n            projectId: props.task.projectId\n        };\n        props.onSubmit(editTaskDto);\n    };\n    return (\n        <Card\n            className='EditTaskForm'\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editTaskHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's title\"\n                        defaultValue={props.task.title}\n                        ref={titleRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's description\"\n                        defaultValue={props.task.description}\n                        ref={descriptionRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formStatus\">\n                    <Form.Label>{props.task.status}</Form.Label>\n                </Form.Group>\n                <Form.Group controlId=\"formProject\">\n                    <Form.Label>{projectName}</Form.Label>\n                </Form.Group>\n                {props.error &&\n                <Form.Group controlId=\"error\">\n                    <Card border='danger' text='danger'>\n                        <Card.Body>  {props.error} </Card.Body>\n                    </Card>\n                </Form.Group>\n                }\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditTaskForm;","import React, {useRef} from \"react\";\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Project} from \"../../project.model\";\nimport {EditProjectDto} from \"../../edit-project.dto\";\nimport './EditProjectForm.css';\n\ninterface EditProjectProps {\n    project: Project;\n    onSubmit: (editProjectDto: EditProjectDto) => void;\n    error: string;\n}\n\nconst EditProjectForm: React.FC<EditProjectProps> = (props) => {\n    const titleRef = useRef<HTMLInputElement>(null);\n    const descriptionRef = useRef<HTMLInputElement>(null);\n    const editProjectHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editProjectDto: EditProjectDto = {\n            id: props.project.id,\n            title: titleRef.current!.value,\n            description: descriptionRef.current!.value\n        };\n        props.onSubmit(editProjectDto);\n    };\n    return (\n        <Card\n            className='EditProjectForm'\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editProjectHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter projects's title\"\n                        defaultValue={props.project.title}\n                        ref={titleRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter project's description\"\n                        defaultValue={props.project.description}\n                        ref={descriptionRef}/>\n                </Form.Group>\n                {props.error &&\n                <Form.Group controlId=\"error\">\n                    <Card border='danger' text='danger'>\n                        <Card.Body>  {props.error} </Card.Body>\n                    </Card>\n                </Form.Group>\n                }\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditProjectForm;","import React from 'react';\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport {NavLink} from 'react-router-dom';\n\nconst NavBarNoAuth: React.FC = () => {\n    return (\n        <Navbar bg=\"info\" variant='dark' expand='md'>\n            <Navbar.Brand href=\"#home\">PTM</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                </Nav>\n                <Nav>\n                    <Nav.Link as={NavLink} to='/signin' exact>Sign In</Nav.Link>\n                    <Nav.Link as={NavLink} to='/signup'>Sign Up</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n\nexport default NavBarNoAuth;","import React, {useRef} from 'react';\nimport './SignInForm.css';\nimport {Form, Button, Card} from 'react-bootstrap';\n\ninterface SignInProps {\n    onSingIn: (email: string, password: string) => void;\n    error: string;\n}\n\nconst SignInForm: React.FC<SignInProps> = props => {\n    const emailInputRef = useRef<HTMLInputElement>(null);\n    const passwordInputRef = useRef<HTMLInputElement>(null);\n    const signInHandler = (event: React.FormEvent) => {\n        const email = emailInputRef.current!.value;\n        const password = passwordInputRef.current!.value;\n        event.preventDefault();\n        props.onSingIn(email, password);\n    };\n\n    return (\n        <Card\n            className='CreateTask'\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={signInHandler}>\n                <Form.Group controlId=\"formEmail\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Enter email\" required ref={emailInputRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"password\" required ref={passwordInputRef}/>\n                </Form.Group>\n                { props.error &&\n                    <Form.Group controlId=\"error\">\n                        <Card border='danger' text='danger'>\n                            <Card.Body>  {props.error} </Card.Body>\n                        </Card>\n                    </Form.Group>\n                }\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Sign In\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default SignInForm;","import React, {useRef, useState} from 'react';\nimport './SignUpForm.css';\nimport {Form, Button, Card} from 'react-bootstrap';\n\ninterface SignUpProps {\n    onSingUp: (email: string, password: string) => void;\n    error: string;\n}\n\nconst SignUpForm: React.FC<SignUpProps> = props => {\n    const emailInputRef = useRef<HTMLInputElement>(null);\n    const passwordInputRef = useRef<HTMLInputElement>(null);\n    const confirmPasswordInputRef = useRef<HTMLInputElement>(null);\n    const [error, setError] = useState<string>('');\n    const signUpHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const email = emailInputRef.current!.value;\n        const password = passwordInputRef.current!.value;\n        const confirmPassword = confirmPasswordInputRef.current!.value;\n        if (password === confirmPassword) {\n            setError('');\n            props.onSingUp(email, password);\n        } else {\n            setError('Password not match');\n        }\n    };\n\n    return (\n        <Card\n            className='CreateTask'\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={signUpHandler}>\n                <Form.Group controlId=\"formEmail\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Enter email\" required ref={emailInputRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"password\" required ref={passwordInputRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formConfirmPassword\">\n                    <Form.Label>Confirm password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"confirm password\" required ref={confirmPasswordInputRef} />\n                </Form.Group>\n                { (error || props.error) &&\n                    <Form.Group controlId=\"error\">\n                        <Card border='danger' text='danger'>\n                            <Card.Body>  {error || props.error} </Card.Body>\n                        </Card>\n                    </Form.Group>\n                }\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Sign Up\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default SignUpForm;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'http://13.49.0.113:3000',\n});\n\nexport default instance;","import React, {useRef} from \"react\";\nimport './EditTaskProjectForm.css'\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Task} from \"../../task.model\";\nimport {Project} from \"../../project.model\";\n\ninterface EditTaskProjectProps {\n    task: Task;\n    onEditTaskProject: (taskId: string, projectId: string) => void;\n    onDeleteTaskProject: (taskId: string) => void;\n    projects: Project [];\n    error: string;\n}\n\nconst EditTaskProjectForm: React.FC<EditTaskProjectProps> = (props) => {\n    const titleRef = useRef<HTMLInputElement>(null);\n    const descriptionRef = useRef<HTMLInputElement>(null);\n    const projectInputRef = useRef<HTMLSelectElement>(null);\n\n    const selectProjectFormControl = props.projects.map(project => {\n\n            if (project.id === props.task.projectId) {\n                return (\n                    <option value={project.id} selected>{project.title}</option>\n                );\n            } else {\n                return (\n                    <option value={project.id}>{project.title}</option>\n                );\n            }\n        }\n    );\n\n    const editTaskProjectHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        if(projectInputRef.current!.value) {\n            const projectId = projectInputRef.current!.value;\n            props.onEditTaskProject(props.task.id, projectId);\n        } else {\n            props.onDeleteTaskProject(props.task.id);\n        }\n    };\n    return (\n        <Card\n            className='EditTaskProjectForm'\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editTaskProjectHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's title\"\n                        defaultValue={props.task.title}\n                        ref={titleRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's description\"\n                        defaultValue={props.task.description}\n                        ref={descriptionRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formStatus\">\n                    <Form.Label>{props.task.status}</Form.Label>\n                </Form.Group>\n                <Form.Group controlId=\"formProject\">\n                    <Form.Control as=\"select\" custom ref={projectInputRef}>\n                        <option value=''>none</option>\n                        {selectProjectFormControl}\n                    </Form.Control>\n                </Form.Group>\n                {props.error &&\n                <Form.Group controlId=\"error\">\n                    <Card border='danger' text='danger'>\n                        <Card.Body>  {props.error} </Card.Body>\n                    </Card>\n                </Form.Group>\n                }\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditTaskProjectForm;","import {createSlice} from '@reduxjs/toolkit';\n\nexport const systemSlice = createSlice(\n    {\n        name: 'system',\n        initialState: {\n            error: \"\",\n            token: \"\",\n            isChangedFlag: false\n        },\n        reducers: {\n            clearError: state => {\n                state.error = '';\n            },\n\n            clearToken: state => {\n                state.token = '';\n            },\n\n            setToken: (state, action) => {\n                state.token = action.payload;\n            },\n\n            setError: (state, action) => {\n                state.error = action.payload;\n            },\n\n            setChangedFlag: state => {\n                state.isChangedFlag = !state.isChangedFlag;\n            }\n        }\n    }\n);\n\nexport const {clearError, setError, clearToken, setToken, setChangedFlag} = systemSlice.actions;\n\n// @ts-ignore\nexport const selectSystemError = state => state.system.error;\n// @ts-ignore\nexport const selectSystemToken = state => state.system.token;\n\n// @ts-ignore\nexport const selectSystemIsChanged = state => state.system.isChangedFlag;\n\nexport default systemSlice.reducer;\n","import {createSlice} from '@reduxjs/toolkit';\n\nexport const tasksSlice = createSlice(\n    {\n        name: 'tasks',\n        initialState: {\n            tasks: [],\n        },\n        reducers: {\n            setTasks: (state, action) => {\n                state.tasks = action.payload;\n            }\n        }\n    }\n);\n\nexport const {setTasks} = tasksSlice.actions;\n\n// @ts-ignore\nexport const selectTasksTasks = state => state.tasks.tasks;\n\nexport default tasksSlice.reducer;\n","import React, {useEffect} from \"react\";\nimport {CreateTaskDto} from \"../../create-task.dto\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport CreateTaskForm from \"../CreateTaskForm/CreateTaskForm\";\nimport NavBar from \"../NavBar\";\nimport {CreateProjectDto} from \"../../create-project.dto\";\nimport {EditProjectDto} from \"../../edit-project.dto\";\nimport ListsContainer from \"../ListsContainer\";\nimport CreateProjectForm from \"../CreateProjectForm/CreateProjectForm\";\nimport {Redirect, Route, Switch, useHistory, withRouter} from \"react-router\";\nimport EditTaskForm from \"../EditTaskForm/EditTaskForm\";\nimport EditProjectForm from \"../EditProjectForm/EditProjectForm\";\nimport NavBarNoAuth from \"../NavBarNoAuth\";\nimport SignInForm from \"../SignInForm/SignInForm\";\nimport SignUpForm from \"../SignUpForm/SignUpForm\";\nimport instance from '../../axios.config';\nimport EditTaskProjectForm from \"../EditTaskProjectForm/EditTaskProjectForm\";\nimport {useSelector, useDispatch} from 'react-redux';\nimport {\n    selectSystemError,\n    selectSystemToken,\n    setError,\n    clearError,\n    setToken,\n    clearToken,\n    setChangedFlag,\n    selectSystemIsChanged\n} from '../../store/systemSlice';\n\nimport {selectTasksTasks, setTasks} from '../../store/tasksSlice';\nimport {selectProjectsProjects, setProjects} from '../../store/projectsSlice';\n\nconst axios = instance;\n\nconst PTMContainer: React.FC = (props) => {\n    const history = useHistory();\n    const token = useSelector(selectSystemToken);\n    const changeFlag = useSelector(selectSystemIsChanged);\n    const systemError = useSelector(selectSystemError);\n    const tasks = useSelector(selectTasksTasks);\n    const projects = useSelector(selectProjectsProjects);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (token) {\n            axios.get('/tasks', {\n                headers: {\n                    Authorization: 'Bearer ' + token\n                }\n            })\n                .then(function (response) {\n                    dispatch(clearError());\n                    dispatch(setTasks(response.data));\n                })\n                .catch(function (error) {\n                    dispatch(setError(error.toString()));\n                });\n\n            axios.get('/projects', {\n                headers: {\n                    Authorization: 'Bearer ' + token\n                }\n            })\n                .then(function (response) {\n                    dispatch(clearError());\n                    dispatch(setProjects(response.data));\n                })\n                .catch(function (error) {\n                    dispatch(setError(error.toString()));\n                });\n        }\n    }, [changeFlag, token, dispatch]);\n\n\n    const addTaskHandler = (createTaskDto: CreateTaskDto) => {\n        if (createTaskDto.projectId) {\n            createTaskWithProject(createTaskDto.title, createTaskDto.description, createTaskDto.projectId);\n        } else {\n            createTask(createTaskDto.title, createTaskDto.description);\n        }\n    };\n\n\n    const createTask = (title: string, description: string) => {\n        axios.post('/tasks', {\n            title: title,\n            description: description\n        }, {\n            headers: {\n                Authorization: 'Bearer ' + token\n            }\n        })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n                history.push('/');\n\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n\n    };\n\n    const createTaskWithProject = (title: string, description: string, projectId: string) => {\n        axios.post('/tasks', {\n            title: title,\n            description: description,\n            projectId: projectId\n        }, {\n            headers: {\n                Authorization: 'Bearer ' + token\n            }\n        })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n                history.push('/');\n\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n    };\n\n    const addProjectHandler = (createProjectDto: CreateProjectDto) => {\n        axios.post('/projects', {\n            title: createProjectDto.title,\n            description: createProjectDto.description\n        }, {\n            headers: {\n                Authorization: 'Bearer ' + token\n            }\n        })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n                history.push('/');\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n    };\n\n    const editTaskHandler = (editTaskDto: EditTaskDto) => {\n        axios.patch(\n            `/tasks/${editTaskDto.id}`,\n            {\n                title: editTaskDto.title,\n                description: editTaskDto.description\n            },\n            {\n                headers: {\n                    Authorization: 'Bearer ' + token\n                }\n            })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n                history.push('/');\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n    }\n\n    const changeTaskStatusHandler = (editTaskDto: EditTaskDto) => {\n        axios.patch(\n            `/tasks/${editTaskDto.id}/status`,\n            {\n                status: editTaskDto.status\n            }, {\n                headers: {\n                    Authorization: 'Bearer ' + token\n                }\n            })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            })\n    }\n\n    const editTaskProjectHandler = (taskId: string, projectId: string) => {\n        axios.put(\n            `/tasks/${taskId}/project`,\n            {\n                projectId: projectId\n            },\n            {\n                headers: {\n                    Authorization: 'Bearer ' + token\n                }\n            })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n                history.push('/');\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n    }\n\n    const deleteTaskProjectHandler = (taskId: string) => {\n\n        axios.delete(\n            `/tasks/${taskId}/project`,\n            {\n                headers: {\n                    Authorization: 'Bearer ' + token\n                }\n            })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n                history.push('/');\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n    }\n\n    const editProjectHandler = (editProjectDto: EditProjectDto) => {\n        axios.patch(\n            `/projects/${editProjectDto.id}`,\n            {\n                title: editProjectDto.title,\n                description: editProjectDto.description\n            },\n            {\n                headers: {\n                    Authorization: 'Bearer ' + token\n                }\n            })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n                history.push('/');\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n    }\n\n    const deleteTaskHandler = (taskId: string) => {\n        return axios.delete(`/tasks/${taskId}`, {\n            headers: {\n                Authorization: 'Bearer ' + token\n            }\n        })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n            })\n            .catch(function (error) {\n                dispatch(setError(error.toString()));\n            });\n    };\n\n    const deleteProjectHandler = (projectId: string) => {\n        axios.delete(`/tasks/project_from_tasks/${projectId}`, {\n            headers: {\n                Authorization: 'Bearer ' + token\n            }\n        })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n\n        axios.delete(`/projects/${projectId}`, {\n            headers: {\n                Authorization: 'Bearer ' + token\n            }\n        })\n            .then(function (response) {\n                dispatch(clearError());\n                dispatch(setChangedFlag());\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n    };\n\n    const signInHandler = (email: string, password: string) => {\n        axios.post('/auth/signin', {\n            username: email,\n            password: password\n        })\n            .then(function (response) {\n                dispatch(setToken(response.data.accessToken));\n                dispatch(clearError());\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n    };\n\n    const signUpHandler = (email: string, password: string) => {\n        axios.post('/auth/signup', {\n            username: email,\n            password: password\n        })\n            .then(function (response) {\n                axios.post('/auth/signin', {\n                    username: email,\n                    password: password\n                })\n                    .then(function (response) {\n                        dispatch(setToken(response.data.accessToken));\n                        dispatch(clearError());\n                    })\n                    .catch(function (error) {\n                        if (error.response.data.message) {\n                            dispatch(setError(error.response.data.message.toString()));\n                        } else {\n                            dispatch(setError(error.toString()));\n                        }\n                    });\n            })\n            .catch(function (error) {\n                if (error.response.data.message) {\n                    dispatch(setError(error.response.data.message.toString()));\n                } else {\n                    dispatch(setError(error.toString()));\n                }\n            });\n    };\n\n    const signOutHandler = () => {\n        dispatch(clearToken());\n    };\n\n    const lists = () => (\n        <ListsContainer\n            tasks={tasks}\n            projects={projects}\n            deleteTaskHandler={deleteTaskHandler}\n            changeTaskStatusHandler={changeTaskStatusHandler}\n            deleteProjectHandler={deleteProjectHandler}\n            editProjectHandler={editProjectHandler}\n            error={systemError}\n        />\n    );\n\n    const createTaskForm = () => (\n        <CreateTaskForm onCreateTask={addTaskHandler} error={systemError} projects={projects}/>\n    );\n\n    const createProjectForm = () => (\n        <CreateProjectForm onCreateProject={addProjectHandler} error={systemError}/>\n    );\n\n    const editTaskForm = (props: any) => {\n        // @ts-ignore\n        const task = tasks.find(task => task.id === props.match.params.id)\n        if (task) {\n            return (\n                <EditTaskForm task={task} projects={projects} onSubmit={editTaskHandler} error={systemError}/>\n            );\n        } else {\n            return (\n                <h4>Task with id: {props.match.params.id} not found</h4>\n            );\n        }\n    };\n\n    const editTaskProjectForm = (props: any) => {\n        // @ts-ignore\n        const task = tasks.find(task => task.id === props.match.params.id)\n        if (task) {\n            return (\n                <EditTaskProjectForm\n                    task={task}\n                    projects={projects}\n                    onEditTaskProject={editTaskProjectHandler}\n                    onDeleteTaskProject={deleteTaskProjectHandler}\n                    error={systemError\n                    }\n                />\n            );\n        } else {\n            return (\n                <h4>Task with id: {props.match.params.id} not found</h4>\n            );\n        }\n    };\n\n    const editProjectForm = (props: any) => {\n        // @ts-ignore\n        const project = projects.find(project => project.id === props.match.params.id)\n        if (project) {\n            return (\n                <EditProjectForm project={project} onSubmit={editProjectHandler} error={systemError}/>\n            );\n        } else {\n            return (\n                <h4>Project with id: {props.match.params.id} not found</h4>\n            );\n        }\n    };\n\n    const signInForm = (props: any) => (\n        <SignInForm onSingIn={signInHandler} error={systemError}/>\n    );\n\n    const signUpForm = (props: any) => (\n        <SignUpForm onSingUp={signUpHandler} error={systemError}/>\n    );\n\n    let routes;\n\n    if (token) {\n        routes = (\n            <div className='main'>\n                <NavBar onSignOut={signOutHandler}/>\n                <Switch>\n                    <Route path=\"/\" exact component={lists}/>\n                    <Route path=\"/new-task\" exact component={createTaskForm}/>\n                    <Route path=\"/new-project\" exact component={createProjectForm}/>\n                    <Route path=\"/task/:id\" exact component={editTaskForm}/>\n                    <Route path=\"/task/:id/project\" exact component={editTaskProjectForm}/>\n                    <Route path=\"/project/:id\" exact component={editProjectForm}/>\n                    <Redirect from=\"/\" to=\"/\"/>\n                </Switch>\n            </div>\n        );\n    } else {\n        routes = (\n            <div className='main'>\n                <NavBarNoAuth/>\n                <Switch>\n                    <Route path=\"/signin\" exact component={signInForm}/>\n                    <Route path=\"/signup\" exact component={signUpForm}/>\n                    <Redirect from=\"/\" to='/signin'/>\n                </Switch>\n            </div>\n        );\n    }\n\n    return (\n        routes\n    );\n};\n\nexport default withRouter(PTMContainer);","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PTMContainer from \"./components/PTMContainer/PTMContainer\";\nimport {HashRouter} from \"react-router-dom\";\n\nconst App: React.FC = () => {\n    return (\n        <HashRouter>\n            <div className='App'>\n                <PTMContainer/>\n            </div>\n        </HashRouter>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {configureStore} from '@reduxjs/toolkit';\nimport systemReducer from './systemSlice'\nimport tasksReducer from './tasksSlice'\nimport projectsReducer from './projectsSlice'\n\nexport default configureStore({\n        reducer: {\n            system: systemReducer,\n            tasks: tasksReducer,\n            projects: projectsReducer\n        },\n    }\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from './store/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Provider>,\ndocument.getElementById('root')\n)\n;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}