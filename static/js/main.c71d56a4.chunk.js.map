{"version":3,"sources":["task.status.enum.ts","components/CreateTaskForm/CreateTaskForm.tsx","components/NavBar.tsx","components/EditTaskStatusForm.tsx","components/TaskForm.tsx","components/TasksList/TasksList.tsx","components/TasksList/TaskListFunction.ts","components/ProjectForm.tsx","components/ProjectsList.tsx","components/ListsContainer.tsx","components/CreateProjectForm/CreateProjectForm.tsx","components/EditTaskForm/EditTaskForm.tsx","components/EditProjectForm/EditProjectForm.tsx","components/PTMContainer/PTMContainer.tsx","components/PTMContainer/PtmContainerFunctions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskStatus","CreateTaskForm","props","titleInputRef","useRef","descriptionInputRef","projectInputRef","Card","className","border","text","Form","onSubmit","event","preventDefault","createTaskDto","title","current","value","description","projectId","onCreateTask","Group","controlId","Label","Control","type","placeholder","ref","Button","variant","size","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","as","to","NavDropdown","Item","Divider","EditTaskStatusForm","statusRef","style","width","margin","padding","editTaskDto","task","status","changeVisibility","defaultValue","OPEN","IN_PROGRESS","DONE","TaskForm","useState","isEditable","setEditable","displayForm","onEdit","onEditTask","Body","Title","key","color","Text","onClick","onDeleteTask","bind","TasksList","tasks","projectFilter","statusFilter","taskListElements","items","project","filter","map","Row","Container","maxWidth","Badge","ProjectForm","onChangeFilter","onDeleteProject","ProjectsList","onEditProject","ListsContainer","Col","xs","sm","lg","deleteTaskHandler","editTaskHandler","projects","deleteProjectHandler","editProjectHandler","setProjectFilter","CreateProjectForm","createProjectDto","onCreateProject","onClearFilter","EditTaskForm","titleRef","descriptionRef","projectRef","EditProjectForm","editProjectDto","withRouter","setTasks","setProjects","addTaskHandler","prevTasks","Math","random","toString","addProjectHandler","prevProjects","taskIndex","findIndex","updateTaskValues","newTasks","projectIndex","updateProjectValues","newProjects","taskId","path","exact","component","find","match","params","console","log","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c71d56a4.chunk.js","sourcesContent":["export enum TaskStatus {\n    OPEN = 'OPEN',\n    IN_PROGRESS = 'IN_PROGRESS',\n    DONE = 'DONE'\n}","import React, {useRef} from 'react';\nimport './CreateTask.css';\nimport {Form, Button, Card} from 'react-bootstrap';\nimport {CreateTaskDto} from \"../../create-task.dto\";\ninterface CreateTaskProps {\n    onCreateTask: (createTaskDto: CreateTaskDto) => void;\n}\n\nconst CreateTaskForm: React.FC<CreateTaskProps> = props => {\n    const titleInputRef = useRef<HTMLInputElement>(null);\n    const descriptionInputRef = useRef<HTMLInputElement>(null);\n    const projectInputRef = useRef<HTMLInputElement>(null);\n    const createTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const createTaskDto: CreateTaskDto = {\n            title: titleInputRef.current!.value,\n            description: descriptionInputRef.current!.value,\n            projectId: projectInputRef.current!.value\n        };\n        props.onCreateTask(createTaskDto);\n    };\n    return (\n            <Card\n                className='CreateTask'\n                border=\"info\"\n                text=\"info\"\n            >\n                <Form onSubmit={createTaskHandler}>\n                    <Form.Group controlId=\"formTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's title\" ref={titleInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's description\" ref={descriptionInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formProject\">\n                        <Form.Label>Project</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's project\" ref={projectInputRef}/>\n                    </Form.Group>\n                    <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                        Create task\n                    </Button>\n                </Form>\n            </Card>\n    );\n};\n\nexport default CreateTaskForm;","import React from 'react';\nimport {Nav, Navbar, NavDropdown} from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\n\nconst NavBar :React.FC = () => {\n    return (\n        <Navbar bg=\"info\" variant='dark' expand='md'>\n            <Navbar.Brand href=\"#home\">PTM</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link as={Link} to='/'>Home</Nav.Link>\n                    <Nav.Link as={Link} to='/new-task'>New Task</Nav.Link>\n                    <Nav.Link as={Link} to='/new-project'>New Project</Nav.Link>\n                    <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#action/3.1\">Reports</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n\nexport default NavBar;","import React, {useRef} from \"react\";\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Task} from \"../task.model\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {TaskStatus} from \"../task.status.enum\";\n\ninterface EditTaskStatusProps {\n    task: Task;\n    onSubmit: (editTaskDto: EditTaskDto) => void;\n    changeVisibility: () => void;\n}\n\nconst EditTaskStatusForm: React.FC<EditTaskStatusProps> = (props) => {\n    const statusRef = useRef<HTMLSelectElement>(null);\n    const editTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editTaskDto: EditTaskDto = {\n            id: props.task.id,\n            title: props.task.title,\n            description: props.task.description,\n            status: statusRef.current!.value,\n            projectId: props.task.projectId\n        };\n        props.onSubmit(editTaskDto);\n        props.changeVisibility();\n    };\n    return (\n        <Card\n            style={{\n                width: '100%',\n                margin: '1%',\n                padding: '2%'\n            }}\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editTaskHandler}>\n                <Form.Group>\n                    <Form.Label>{props.task.title}</Form.Label>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>{props.task.description}</Form.Label>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>{props.task.projectId}</Form.Label>\n                </Form.Group>\n                <Form.Group controlId=\"formStatus\">\n                    <Form.Control as=\"select\" defaultValue={props.task.status} ref={statusRef}>\n                        <option>{TaskStatus.OPEN}</option>\n                        <option>{TaskStatus.IN_PROGRESS}</option>\n                        <option>{TaskStatus.DONE}</option>\n                    </Form.Control>\n                </Form.Group>\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditTaskStatusForm;","import React, {useState} from 'react';\nimport {Card, Button} from \"react-bootstrap\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {Task} from \"../task.model\";\nimport {Link} from \"react-router-dom\";\nimport EditTaskStatusForm from \"./EditTaskStatusForm\";\n\ninterface TaskProps {\n    task: Task;\n    onDeleteTask: (taskId: string) => void;\n    onEditTask: (editTaskDto: EditTaskDto) => void;\n}\n\nconst TaskForm: React.FC<TaskProps> = props => {\n    const [isEditable, setEditable] = useState<boolean>(false);\n    let displayForm = null;\n    const onEdit = () => {\n        setEditable(!isEditable);\n    };\n\n    if (isEditable) {\n        displayForm = (<EditTaskStatusForm task={props.task} onSubmit={props.onEditTask} changeVisibility={onEdit}/>);\n\n    } else {\n        displayForm = (\n            <Card\n                border=\"info\"\n                text=\"info\"\n            >\n                <Card.Body>\n                    <Card.Title\n                        as={Link}\n                        to={'/task/' + props.task.id}\n                        key={props.task.id}\n                        style={{\n                            color: \"lightseagreen\"\n                        }}\n                    >\n                        {props.task.title}\n                    </Card.Title>\n                    <Card.Text>\n                        {props.task.description}\n                    </Card.Text>\n                    <Card.Text>\n                        {props.task.projectId}\n                    </Card.Text>\n                    <Card.Text>\n                        {props.task.status}\n                    </Card.Text>\n                    <Button\n                        style={{margin: '1%'}}\n                        variant=\"outline-info\"\n                        onClick={() => onEdit()}\n                        size='sm'\n                    >\n                        Edit\n                    </Button>\n                    <Button\n                        variant=\"outline-info\"\n                        onClick={props.onDeleteTask.bind(null, props.task.id)}\n                        size='sm'\n                    >\n                        Delete\n                    </Button>\n                </Card.Body>\n            </Card>\n        );\n    }\n    return (\n        <div style={{\n            width: '100%',\n            margin: '1%'\n        }}>\n            {displayForm}\n        </div>\n    );\n};\n\nexport default TaskForm;","import React from 'react';\nimport TaskForm from \"../TaskForm\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport {Container, Row, Badge} from 'react-bootstrap';\nimport {Task} from \"../../task.model\";\nimport {filterTasks} from \"./TaskListFunction\";\ninterface TasksListProps {\n    // @ts-ignore\n    items: Task [];\n    onDeleteTask: (taskId: string) => void;\n    onEditTask: (editTaskDto: EditTaskDto) => void;\n    status: string;\n    project: string;\n}\n\n\n\nconst TasksList: React.FC<TasksListProps> = props => {\n\n    const taskListItems = filterTasks(props.items, props.project, props.status);\n\n    const taskListElements = taskListItems.map(task =>\n        <Row>\n            <TaskForm task={task} onDeleteTask={props.onDeleteTask} onEditTask={props.onEditTask}/>\n        </Row>);\n\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            <Row>\n                <h4><Badge variant=\"info\">{props.status}</Badge></h4>\n            </Row>\n            {taskListElements}\n        </Container>\n    );\n};\n\nexport default TasksList;","import {Task} from \"../../task.model\";\n\nexport function filterTasks(tasks: Task [], projectFilter: string, statusFilter: string) {\n\n    let result;\n\n    if (projectFilter) {\n        if (projectFilter === '-') {\n            result = tasks\n                .filter(task => task.status === statusFilter)\n                .filter(task => task.projectId === \"\");\n        } else {\n            result = tasks\n                .filter(task => task.status === statusFilter)\n                .filter(task => task.projectId === projectFilter);\n        }\n    } else {\n        result = tasks.filter(task => task.status === statusFilter);\n    }\n    return result;\n}","import React from 'react';\nimport {Card, Button} from \"react-bootstrap\";\nimport {Project} from \"../project.model\";\nimport {EditProjectDto} from \"../edit-project.dto\";\nimport {Link} from \"react-router-dom\";\n\ninterface ProjectProps {\n    project: Project;\n    onDeleteProject: (projectId: string) => void;\n    onEditProject: (editProjectDto: EditProjectDto) => void;\n    onChangeFilter: (filter: string) => void;\n}\n\nconst ProjectForm: React.FC<ProjectProps> = props => {\n    return (\n        <Card\n            border=\"info\"\n            text=\"info\"\n        >\n            <Card.Body>\n                <Card.Title\n                    onClick={() => props.onChangeFilter(props.project.title)}\n                >\n                    {props.project.title}\n                </Card.Title>\n                <Card.Text>\n                    {props.project.description}\n                </Card.Text>\n                <Button\n                    as={Link}\n                    to={'/project/' + props.project.id}\n                    key = {props.project.id}\n                    variant=\"outline-info\"\n                    size='sm'\n                >\n                    Edit\n                </Button>\n                <Button\n                    variant=\"outline-info\"\n                    onClick={props.onDeleteProject.bind(null, props.project.id)}\n                    size='sm'\n                >\n                    Delete\n                </Button>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default ProjectForm;","import React from 'react';\nimport {Container, Row, Badge, Button} from 'react-bootstrap';\nimport {EditProjectDto} from \"../edit-project.dto\";\nimport ProjectForm from \"./ProjectForm\";\nimport {Project} from \"../project.model\";\n\ninterface ProjectsListProps {\n    // @ts-ignore\n    items: Project [];\n    onDeleteProject: (projectId: string) => void;\n    onEditProject: (editProjectDto: EditProjectDto) => void;\n    onChangeFilter: (filter: string) => void;\n}\n\nconst ProjectsList: React.FC<ProjectsListProps> = props => {\n\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            <Row>\n                <h4><Badge variant=\"info\">PROJECTS</Badge></h4>\n            </Row>\n            <Row>\n                <Row>\n                    <Button\n                        style={{margin: '1px'}}\n                        variant=\"outline-info\"\n                        size='sm'\n                        onClick={() => props.onChangeFilter('')}\n                    >\n                        Clear Filter\n                    </Button>\n                    <Button\n                        style={{margin: '1px'}}\n                        variant=\"outline-info\"\n                        size='sm'\n                        onClick={() => props.onChangeFilter('-')}\n                    >\n                        Tasks without project\n                    </Button>\n                </Row>\n            </Row>\n                {props.items\n                    .map(project =>\n                    <Row>\n                        <ProjectForm\n                            project={project}\n                            onDeleteProject={props.onDeleteProject}\n                            onEditProject={props.onEditProject}\n                            onChangeFilter={props.onChangeFilter}\n                        />\n                    </Row>)}\n        </Container>\n    );\n};\n\nexport default ProjectsList;","import React from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport TasksList from \"./TasksList/TasksList\";\nimport ProjectsList from \"./ProjectsList\";\nimport {Task} from \"../task.model\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {Project} from \"../project.model\";\nimport {EditProjectDto} from \"../edit-project.dto\";\n\ntype ListsContainerProps = {\n    tasks: Task [];\n    projects: Project [];\n    deleteTaskHandler: (taskId: string) => void;\n    editTaskHandler: (editTaskDto: EditTaskDto) => void;\n    projectFilter: string;\n    deleteProjectHandler: (projectId: string) => void;\n    setProjectFilter: (project: string) => void;\n    editProjectHandler: (editProjectDto: EditProjectDto) => void;\n}\n\nconst ListsContainer: React.FC<ListsContainerProps> = (props) => {\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            <Row>\n                <Col xs={10} sm={3} lg={3}>\n                    <TasksList\n                        status='OPEN'\n                        items={props.tasks}\n                        onDeleteTask={props.deleteTaskHandler}\n                        onEditTask={props.editTaskHandler}\n                        project={props.projectFilter}\n                    />\n                </Col>\n                <Col xs={10} sm={3} lg={3}>\n                    <TasksList\n                        status='IN_PROGRESS'\n                        items={props.tasks}\n                        onDeleteTask={props.deleteTaskHandler}\n                        onEditTask={props.editTaskHandler}\n                        project={props.projectFilter}\n                    />\n                </Col>\n                <Col xs={10} sm={3} lg={3}>\n                    <TasksList\n                        status='DONE'\n                        items={props.tasks}\n                        onDeleteTask={props.deleteTaskHandler}\n                        onEditTask={props.editTaskHandler}\n                        project={props.projectFilter}\n                    />\n                </Col>\n                <Col xs={10} sm={3} lg={3}>\n                    <ProjectsList\n                        items={props.projects}\n                        onDeleteProject={props.deleteProjectHandler}\n                        onEditProject={props.editProjectHandler}\n                        onChangeFilter={props.setProjectFilter}\n                    />\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default ListsContainer;","import React, {useRef} from 'react'\nimport './CreateProjectForm.css'\nimport {Form, Button, Card} from 'react-bootstrap';\nimport {CreateProjectDto} from \"../../create-project.dto\";\ninterface CreateProjectProps {\n    onCreateProject: (createProjectDto: CreateProjectDto) => void;\n    onClearFilter: (filter: string) => void;\n}\n\nconst CreateProjectForm: React.FC<CreateProjectProps> = props => {\n    const titleInputRef = useRef<HTMLInputElement>(null);\n    const descriptionInputRef = useRef<HTMLInputElement>(null);\n    const createProjectHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const createProjectDto: CreateProjectDto = {\n\n            title: titleInputRef.current!.value,\n            description: descriptionInputRef.current!.value,\n        };\n        props.onCreateProject(createProjectDto);\n    };\n    return (\n            <Card\n                className='CreateProjectForm'\n                border=\"info\"\n                text=\"info\"\n            >\n                <Form onSubmit={createProjectHandler}>\n                    <Form.Group controlId=\"formTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter project's title\" ref={titleInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter projects's description\" ref={descriptionInputRef}/>\n                    </Form.Group>\n                    <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                        Create Project\n                    </Button>\n                    <Button\n                        style = {{margin: '1px'}}\n                        variant=\"outline-info\"\n                        size='sm'\n                        onClick={() => props.onClearFilter('')}\n                    >\n                        Clear filter\n                    </Button>\n                </Form>\n            </Card>\n    );\n};\n\nexport default CreateProjectForm;","import React, {useRef} from \"react\";\nimport './EditTaskForm.css'\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Task} from \"../../task.model\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport {TaskStatus} from \"../../task.status.enum\";\n\ninterface EditTaskProps {\n    task: Task;\n    onSubmit: (editTaskDto: EditTaskDto) => void;\n}\n\nconst EditTaskForm: React.FC<EditTaskProps> = (props) => {\n    const titleRef = useRef<HTMLInputElement>(null);\n    const descriptionRef = useRef<HTMLInputElement>(null);\n    const statusRef = useRef<HTMLSelectElement>(null);\n    const projectRef = useRef<HTMLInputElement>(null);\n    const editTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editTaskDto: EditTaskDto = {\n            id: props.task.id,\n            title: titleRef.current!.value,\n            description: descriptionRef.current!.value,\n            status: statusRef.current!.value,\n            projectId: projectRef.current!.value\n        };\n        props.onSubmit(editTaskDto);\n    };\n    return (\n        <Card\n            className='EditTaskForm'\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editTaskHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's title\"\n                        defaultValue={props.task.title}\n                        ref={titleRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's description\"\n                        defaultValue={props.task.description}\n                        ref={descriptionRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formStatus\">\n                    <Form.Label>Status</Form.Label>\n                    <Form.Control as=\"select\" defaultValue={props.task.status} ref={statusRef}>\n                        <option>Choose...</option>\n                        <option>{TaskStatus.OPEN}</option>\n                        <option>{TaskStatus.IN_PROGRESS}</option>\n                        <option>{TaskStatus.DONE}</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"formProject\">\n                    <Form.Label>Project</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's project\"\n                        defaultValue={props.task.projectId}\n                        ref={projectRef}/>\n                </Form.Group>\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditTaskForm;","import React, {useRef} from \"react\";\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Project} from \"../../project.model\";\nimport {EditProjectDto} from \"../../edit-project.dto\";\nimport './EditProjectForm.css';\n\ninterface EditProjectProps {\n    project: Project;\n    onSubmit: (editProjectDto: EditProjectDto) => void;\n}\n\nconst EditProjectForm: React.FC<EditProjectProps> = (props) => {\n    const titleRef = useRef<HTMLInputElement>(null);\n    const descriptionRef = useRef<HTMLInputElement>(null);\n    const editProjectHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editProjectDto: EditProjectDto = {\n            id: props.project.id,\n            title: titleRef.current!.value,\n            description: descriptionRef.current!.value\n        };\n        props.onSubmit(editProjectDto);\n    };\n    return (\n        <Card\n            className='EditProjectForm'\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editProjectHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter projects's title\"\n                        defaultValue={props.project.title}\n                        ref={titleRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter project's description\"\n                        defaultValue={props.project.description}\n                        ref={descriptionRef}/>\n                </Form.Group>\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditProjectForm;","import React, {useState} from \"react\";\nimport {Task} from \"../../task.model\";\nimport {CreateTaskDto} from \"../../create-task.dto\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport CreateTaskForm from \"../CreateTaskForm/CreateTaskForm\";\nimport {updateProjectValues, updateTaskValues} from \"./PtmContainerFunctions\";\nimport {TaskStatus} from \"../../task.status.enum\";\nimport NavBar from \"../NavBar\";\nimport {Project} from \"../../project.model\";\nimport {CreateProjectDto} from \"../../create-project.dto\";\nimport {EditProjectDto} from \"../../edit-project.dto\";\nimport ListsContainer from \"../ListsContainer\";\nimport CreateProjectForm from \"../CreateProjectForm/CreateProjectForm\";\nimport {Route, withRouter} from \"react-router\";\nimport EditTaskForm from \"../EditTaskForm/EditTaskForm\";\nimport EditProjectForm from \"../EditProjectForm/EditProjectForm\";\n\n\nconst PTMContainer: React.FC = (props) => {\n    const [tasks, setTasks] = useState<Task[]>([]);\n    const [projects, setProjects] = useState<Project[]>([]);\n    const [projectFilter, setProjectFilter] = useState<string>('');\n\n    const addTaskHandler = (createTaskDto: CreateTaskDto) => {\n        setTasks(\n            prevTasks =>\n                [...prevTasks,\n                    {\n                        id: Math.random().toString(),\n                        title: createTaskDto.title,\n                        description: createTaskDto.description,\n                        projectId: createTaskDto.projectId,\n                        status: TaskStatus.OPEN\n                    }\n                ]\n        );\n    };\n\n    const addProjectHandler = (createProjectDto: CreateProjectDto) => {\n        setProjects(\n            prevProjects =>\n                [...prevProjects,\n                    {\n                        id: Math.random().toString(),\n                        title: createProjectDto.title,\n                        description: createProjectDto.description\n                    }\n                ]\n        );\n    };\n\n    const editTaskHandler = (editTaskDto: EditTaskDto) => {\n        const taskIndex = tasks.findIndex(task => task.id === editTaskDto.id);\n\n        const task: Task = {...tasks[taskIndex]};\n        updateTaskValues(editTaskDto, task);\n\n        const newTasks = [...tasks];\n        newTasks[taskIndex] = task;\n\n        setTasks(newTasks);\n    }\n\n    const editProjectHandler = (editProjectDto: EditProjectDto) => {\n        const projectIndex = projects.findIndex(project => project.id === editProjectDto.id);\n\n        const project: Project = {...projects[projectIndex]};\n        updateProjectValues(editProjectDto, project);\n\n        const newProjects = [...projects];\n        newProjects[projectIndex] = project;\n\n        setProjects(newProjects);\n    }\n\n    const deleteTaskHandler = (taskId: string) => {\n        setTasks(prevTasks => {\n            return prevTasks.filter(task => task.id !== taskId);\n        });\n    };\n\n    const deleteProjectHandler = (projectId: string) => {\n        setProjects(prevProjects => {\n            return prevProjects.filter(project => project.id !== projectId);\n        });\n    };\n\n    const lists = () => (\n        <ListsContainer\n            tasks={tasks}\n            projects={projects}\n            projectFilter={projectFilter}\n            deleteTaskHandler={deleteTaskHandler}\n            editTaskHandler={editTaskHandler}\n            deleteProjectHandler={deleteProjectHandler}\n            editProjectHandler={editProjectHandler}\n            setProjectFilter={setProjectFilter}\n        />\n    );\n\n    const createTask = () => (\n        <CreateTaskForm onCreateTask={addTaskHandler}/>\n    );\n\n    const createProject = () => (\n        <CreateProjectForm onCreateProject={addProjectHandler} onClearFilter={setProjectFilter} />\n    );\n\n    const editTask = (props: any) => {\n        const task = tasks.find(task => task.id === props.match.params.id)\n        if(task) {\n            return (\n                <EditTaskForm task={task} onSubmit={editTaskHandler}/>\n            );\n        } else {\n            return (\n                <h4>Task with id: {props.match.params.id} not found</h4>\n            );\n        }\n    };\n\n    const editProject = (props: any) => {\n        console.log('editProject', props)\n        const project = projects.find(project => project.id === props.match.params.id)\n        if(project) {\n            return (\n               <EditProjectForm project={project} onSubmit={editProjectHandler} />\n            );\n        } else {\n            return (\n                <h4>Project with id: {props.match.params.id} not found</h4>\n            );\n        }\n    };\n\n\n    return (\n        <div className='main'>\n            <NavBar/>\n            <Route path=\"/\" exact component={lists}/>\n            <Route path=\"/new-task\" exact component={createTask}/>\n            <Route path=\"/new-project\" exact component={createProject}/>\n            <Route path=\"/task/:id\" exact component={editTask} />\n            <Route path=\"/project/:id\" exact component={editProject} />\n        </div>\n    );\n};\n\nexport default withRouter(PTMContainer);","import {EditTaskDto} from \"../../edit-task.dto\";\nimport {Task} from \"../../task.model\";\nimport {TaskStatus} from \"../../task.status.enum\";\nimport {EditProjectDto} from \"../../edit-project.dto\";\nimport {Project} from \"../../project.model\";\n\nexport function updateTaskValues(editTaskDto: EditTaskDto, task: Task) {\n    if (editTaskDto.title) {\n        task.title = editTaskDto.title;\n    }\n\n    if (editTaskDto.description) {\n        task.description = editTaskDto.description;\n    }\n\n    if (editTaskDto.projectId) {\n        task.projectId = editTaskDto.projectId;\n    }\n\n    if (editTaskDto.status) {\n        // @ts-ignore\n        task.status = TaskStatus[editTaskDto.status];\n    }\n}\n\nexport function updateProjectValues(editProjectDto: EditProjectDto, project: Project) {\n    if (editProjectDto.title) {\n        project.title = editProjectDto.title;\n    }\n\n    if (editProjectDto.description) {\n        project.description = editProjectDto.description;\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PTMContainer from \"./components/PTMContainer/PTMContainer\";\nimport {HashRouter} from \"react-router-dom\";\n\nconst App: React.FC = () => {\n    return (\n        <HashRouter>\n            <div className='App'>\n                <PTMContainer/>\n            </div>\n        </HashRouter>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}