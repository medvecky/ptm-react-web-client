{"version":3,"sources":["task.status.enum.ts","components/EditTaskForm.tsx","components/TaskForm.tsx","components/TasksList.tsx","components/CreateTaskForm.tsx","components/NavBar.tsx","components/CreateProjectForm.tsx","components/EditProjectForm.tsx","components/ProjectForm.tsx","components/ProjectsList.tsx","components/PTMContainer/PTMContainer.tsx","components/PTMContainer/PtmContainerFunctions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskStatus","EditTaskForm","props","titleRef","useRef","descriptionRef","statusRef","projectRef","Card","style","width","margin","padding","border","text","Form","onSubmit","event","preventDefault","editTaskDto","id","task","title","current","value","description","status","projectId","changeVisibility","Group","controlId","Label","Control","type","placeholder","defaultValue","ref","as","OPEN","IN_PROGRESS","DONE","Button","variant","size","TaskForm","useState","isEditable","setEditable","displayForm","onEdit","onEditTask","Body","Title","Text","onClick","onDeleteTask","bind","TasksList","Container","maxWidth","Row","Badge","filter","items","map","CreateTaskForm","titleInputRef","descriptionInputRef","projectInputRef","createTaskDto","onCreateTask","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","NavDropdown","Item","Divider","CreateProjectForm","createProjectDto","onCreateProject","EditProjectForm","editProjectDto","project","ProjectForm","onEditProject","onDeleteProject","ProjectsList","PTMContainer","tasks","setTasks","projects","setProjects","editTaskHandler","taskIndex","findIndex","updateTaskValues","newTasks","deleteTaskHandler","taskId","prevTasks","Col","xs","sm","lg","prevProjects","projectIndex","updateProjectValues","newProjects","Math","random","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ed121659.chunk.js","sourcesContent":["export enum TaskStatus {\n    OPEN = 'OPEN',\n    IN_PROGRESS = 'IN_PROGRESS',\n    DONE = 'DONE'\n}","import React, {useRef} from \"react\";\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Task} from \"../task.model\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {TaskStatus} from \"../task.status.enum\";\n\ninterface EditTaskProps {\n    task: Task;\n    onSubmit: (editTaskDto: EditTaskDto) => void;\n    changeVisibility: () => void;\n}\n\nconst EditTaskForm: React.FC<EditTaskProps> = (props) => {\n    const titleRef = useRef<HTMLInputElement>(null);\n    const descriptionRef = useRef<HTMLInputElement>(null);\n    const statusRef = useRef<HTMLSelectElement>(null);\n    const projectRef = useRef<HTMLInputElement>(null);\n    const editTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editTaskDto: EditTaskDto = {\n            id: props.task.id,\n            title: titleRef.current!.value,\n            description: descriptionRef.current!.value,\n            status: statusRef.current!.value,\n            projectId: projectRef.current!.value\n        };\n        props.onSubmit(editTaskDto);\n        props.changeVisibility();\n    };\n    return (\n        <Card\n            style={{\n                width: '100%',\n                margin: '1%',\n                padding: '1%'\n            }}\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editTaskHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's title\"\n                        defaultValue={props.task.title}\n                        ref={titleRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's description\"\n                        defaultValue={props.task.description}\n                        ref={descriptionRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formStatus\">\n                    <Form.Label>Status</Form.Label>\n                    <Form.Control as=\"select\" defaultValue=\"Choose...\" ref={statusRef}>\n                        <option>Choose...</option>\n                        <option>{TaskStatus.OPEN}</option>\n                        <option>{TaskStatus.IN_PROGRESS}</option>\n                        <option>{TaskStatus.DONE}</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"formProject\">\n                    <Form.Label>Project</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's project\"\n                        defaultValue={props.task.projectId}\n                        ref={projectRef}/>\n                </Form.Group>\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditTaskForm;","import React, {useState} from 'react';\nimport {Card, Button} from \"react-bootstrap\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {Task} from \"../task.model\";\n\ninterface TaskProps {\n    task: Task;\n    onDeleteTask: (taskId: string) => void;\n    onEditTask: (editTaskDto: EditTaskDto) => void;\n}\n\nconst TaskForm: React.FC<TaskProps> = props => {\n    const [isEditable, setEditable] = useState<boolean>(false);\n    let displayForm = null;\n    const onEdit = () => {\n        setEditable(!isEditable);\n    };\n\n    if (isEditable) {\n        displayForm = (<EditTaskForm task={props.task} onSubmit={props.onEditTask} changeVisibility={onEdit}/>);\n\n    } else {\n        displayForm = (\n            <Card\n                border=\"info\"\n                text=\"info\"\n            >\n                <Card.Body>\n                    <Card.Title>{props.task.title}</Card.Title>\n                    <Card.Text>\n                        {props.task.description}\n                    </Card.Text>\n                    <Card.Text>\n                        {props.task.projectId}\n                    </Card.Text>\n                    <Card.Text>\n                        {props.task.status}\n                    </Card.Text>\n                    <Button\n                        style={{margin: '1%'}}\n                        variant=\"outline-info\"\n                        onClick={() => onEdit()}\n                        size='sm'\n                    >\n                        Edit\n                    </Button>\n                    <Button\n                        variant=\"outline-info\"\n                        onClick={props.onDeleteTask.bind(null, props.task.id)}\n                        size='sm'\n                    >\n                        Delete\n                    </Button>\n                </Card.Body>\n            </Card>\n        );\n    }\n\n    return (\n        <div style={{\n            width: '100%',\n            margin: '1%'\n        }}>\n            {displayForm}\n        </div>\n    );\n};\n\nexport default TaskForm;","import React from 'react';\nimport TaskForm from \"./TaskForm\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport { Container, Row, Badge } from 'react-bootstrap';\nimport {Task} from \"../task.model\";\n\ninterface TasksListProps {\n    // @ts-ignore\n    items: Task [];\n    onDeleteTask: (taskId: string) => void;\n    onEditTask: (editTaskDto: EditTaskDto) => void;\n    filter: string\n}\n\nconst TasksList: React.FC<TasksListProps> = props => {\n\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            <Row>\n                <h4><Badge variant=\"info\">{props.filter}</Badge></h4>\n            </Row>\n                {props.items\n                    .filter(task => task.status === props.filter)\n                    .map(task =>\n                    <Row>\n                        <TaskForm task={task} onDeleteTask={props.onDeleteTask} onEditTask={props.onEditTask}/>\n                    </Row>)}\n        </Container>\n    );\n};\n\nexport default TasksList;","import React, {useRef} from 'react';\nimport {Form, Button, Card} from 'react-bootstrap';\nimport {CreateTaskDto} from \"../create-task.dto\";\ninterface CreateTaskProps {\n    onCreateTask: (createTaskDto: CreateTaskDto) => void;\n}\n\nconst CreateTaskForm: React.FC<CreateTaskProps> = props => {\n    const titleInputRef = useRef<HTMLInputElement>(null);\n    const descriptionInputRef = useRef<HTMLInputElement>(null);\n    const projectInputRef = useRef<HTMLInputElement>(null);\n    const createTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const createTaskDto: CreateTaskDto = {\n            title: titleInputRef.current!.value,\n            description: descriptionInputRef.current!.value,\n            projectId: projectInputRef.current!.value\n        };\n        props.onCreateTask(createTaskDto);\n    };\n    return (\n            <Card\n                style={{\n                    padding: '2%',\n                    width: '100%'\n                }}\n                border=\"info\"\n                text=\"info\"\n            >\n                <Form onSubmit={createTaskHandler}>\n                    <Form.Group controlId=\"formTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's title\" ref={titleInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's description\" ref={descriptionInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formProject\">\n                        <Form.Label>Project</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's project\" ref={projectInputRef}/>\n                    </Form.Group>\n                    <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                        Create task\n                    </Button>\n                </Form>\n            </Card>\n    );\n};\n\nexport default CreateTaskForm;","import React from 'react';\nimport {Nav, Navbar, NavDropdown} from \"react-bootstrap\";\n\nconst NavBar :React.FC = () => {\n    return (\n        <Navbar bg=\"info\" variant='dark' expand='md'>\n            <Navbar.Brand href=\"#home\">PTM</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    <Nav.Link href=\"#link\">Projects</Nav.Link>\n                    <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#action/3.1\">Reports</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n\nexport default NavBar;","import React, {useRef} from 'react';\nimport {Form, Button, Card} from 'react-bootstrap';\nimport {CreateProjectDto} from \"../create-project.dto\";\ninterface CreateProjectProps {\n    onCreateProject: (createProjectDto: CreateProjectDto) => void;\n}\n\nconst CreateProjectForm: React.FC<CreateProjectProps> = props => {\n    const titleInputRef = useRef<HTMLInputElement>(null);\n    const descriptionInputRef = useRef<HTMLInputElement>(null);\n    const createProjectHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const createProjectDto: CreateProjectDto = {\n\n            title: titleInputRef.current!.value,\n            description: descriptionInputRef.current!.value,\n        };\n        props.onCreateProject(createProjectDto);\n    };\n    return (\n            <Card\n                style={{\n                    padding: '2%',\n                    width: '100%'\n                }}\n                border=\"info\"\n                text=\"info\"\n            >\n                <Form onSubmit={createProjectHandler}>\n                    <Form.Group controlId=\"formTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter project's title\" ref={titleInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter projects's description\" ref={descriptionInputRef}/>\n                    </Form.Group>\n                    <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                        Create Project\n                    </Button>\n                </Form>\n            </Card>\n    );\n};\n\nexport default CreateProjectForm;","import React, {useRef} from \"react\";\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Project} from \"../project.model\";\nimport {EditProjectDto} from \"../edit-project.dto\";\n\ninterface EditProjectProps {\n    project: Project;\n    onSubmit: (editProjectDto: EditProjectDto) => void;\n    changeVisibility: () => void;\n}\nconst EditProjectForm: React.FC<EditProjectProps> = (props) => {\n    const titleRef = useRef<HTMLInputElement>(null);\n    const descriptionRef = useRef<HTMLInputElement>(null);\n    const editProjectHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editProjectDto: EditProjectDto = {\n            id: props.project.id,\n            title: titleRef.current!.value,\n            description: descriptionRef.current!.value\n        };\n        props.onSubmit(editProjectDto);\n        props.changeVisibility();\n    };\n    return (\n        <Card\n            style={{\n                width: '100%',\n                margin: '1%',\n                padding: '1%'\n            }}\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editProjectHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter projects's title\"\n                        defaultValue={props.project.title}\n                        ref={titleRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter project's description\"\n                        defaultValue={props.project.description}\n                        ref={descriptionRef}/>\n                </Form.Group>\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditProjectForm;","import React, {useState} from 'react';\nimport {Card, Button} from \"react-bootstrap\";\nimport {Project} from \"../project.model\";\nimport EditProjectForm from \"./EditProjectForm\";\nimport {EditProjectDto} from \"../edit-project.dto\";\n\ninterface ProjectProps {\n    project: Project;\n    onDeleteProject: (projectId: string) => void;\n    onEditProject: (editProjectDto: EditProjectDto) => void;\n}\n\nconst ProjectForm: React.FC<ProjectProps> = props => {\n    const [isEditable, setEditable] = useState<boolean>(false);\n    let displayForm = null;\n    const onEdit = () => {\n        setEditable(!isEditable);\n    };\n\n    if (isEditable) {\n        displayForm = (\n            <EditProjectForm\n                project={props.project}\n                onSubmit={props.onEditProject}\n                changeVisibility={onEdit}>\n            </EditProjectForm>);\n\n    } else {\n        displayForm = (\n            <Card\n                border=\"info\"\n                text=\"info\"\n            >\n                <Card.Body>\n                    <Card.Title>{props.project.title}</Card.Title>\n                    <Card.Text>\n                        {props.project.description}\n                    </Card.Text>\n                    <Button\n                        style={{margin: '1%'}}\n                        variant=\"outline-info\"\n                        onClick={() => onEdit()}\n                        size='sm'\n                    >\n                        Edit\n                    </Button>\n                    <Button\n                        variant=\"outline-info\"\n                        onClick={props.onDeleteProject.bind(null, props.project.id)}\n                        size='sm'\n                    >\n                        Delete\n                    </Button>\n                </Card.Body>\n            </Card>\n        );\n    }\n\n    return (\n        <div style={{\n            width: '100%',\n            margin: '1%'\n        }}>\n            {displayForm}\n        </div>\n    );\n};\n\nexport default ProjectForm;","import React from 'react';\nimport { Container, Row, Badge } from 'react-bootstrap';\nimport {EditProjectDto} from \"../edit-project.dto\";\nimport ProjectForm from \"./ProjectForm\";\nimport {Project} from \"../project.model\";\n\ninterface ProjectsListProps {\n    // @ts-ignore\n    items: Project [];\n    onDeleteProject: (projectId: string) => void;\n    onEditProject: (editProjectDto: EditProjectDto) => void;\n}\n\nconst ProjectsList: React.FC<ProjectsListProps> = props => {\n\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            <Row>\n                <h4><Badge variant=\"info\">PROJECTS</Badge></h4>\n            </Row>\n                {props.items\n                    .map(project =>\n                    <Row>\n                        <ProjectForm\n                            project={project}\n                            onDeleteProject={props.onDeleteProject}\n                            onEditProject={props.onEditProject}\n                        />\n                    </Row>)}\n        </Container>\n    );\n};\n\nexport default ProjectsList;","import React, {useState} from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {Task} from \"../../task.model\";\nimport {CreateTaskDto} from \"../../create-task.dto\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport TasksList from \"../TasksList\";\nimport CreateTaskForm from \"../CreateTaskForm\";\nimport {updateProjectValues, updateTaskValues} from \"./PtmContainerFunctions\";\nimport {TaskStatus} from \"../../task.status.enum\";\nimport NavBar from \"../NavBar\";\nimport {Project} from \"../../project.model\";\nimport {CreateProjectDto} from \"../../create-project.dto\";\nimport CreateProjectForm from \"../CreateProjectForm\";\nimport {EditProjectDto} from \"../../edit-project.dto\";\nimport ProjectsList from \"../ProjectsList\";\n\n\nconst PTMContainer: React.FC = () => {\n    const [tasks, setTasks] = useState<Task[]>([]);\n    const [projects, setProjects] = useState<Project[]>([]);\n\n    const addTaskHandler = (createTaskDto: CreateTaskDto) => {\n        setTasks(\n            prevTasks =>\n                [...prevTasks,\n                    {\n                        id: Math.random().toString(),\n                        title: createTaskDto.title,\n                        description: createTaskDto.description,\n                        projectId: createTaskDto.projectId,\n                        status: TaskStatus.OPEN\n                    }\n                ]\n        );\n    };\n\n    const addProjectHandler = (createProjectDto: CreateProjectDto) => {\n        setProjects(\n            prevProjects =>\n                [...prevProjects,\n                    {\n                        id: Math.random().toString(),\n                        title: createProjectDto.title,\n                        description: createProjectDto.description\n                    }\n                ]\n        );\n    };\n\n    const editTaskHandler = (editTaskDto: EditTaskDto) => {\n        const taskIndex = tasks.findIndex(task => task.id === editTaskDto.id);\n\n        const task: Task = {...tasks[taskIndex]};\n        updateTaskValues(editTaskDto, task);\n\n        const newTasks = [...tasks];\n        newTasks[taskIndex] = task;\n\n        setTasks(newTasks);\n    }\n\n    const editProjectHandler = (editProjectDto: EditProjectDto) => {\n        const projectIndex = projects.findIndex(project => project.id === editProjectDto.id);\n\n        const project: Project = {...projects[projectIndex]};\n        updateProjectValues(editProjectDto, project);\n\n        const newProjects = [...projects];\n        newProjects[projectIndex] = project;\n\n        setProjects(newProjects);\n    }\n\n    const deleteTaskHandler = (taskId: string) => {\n        setTasks(prevTasks => {\n            return prevTasks.filter(task => task.id !== taskId);\n        });\n    };\n\n    const deleteProjectHandler = (projectId: string) => {\n        setProjects(prevProjects => {\n            return prevProjects.filter(project => project.id !== projectId);\n        });\n    };\n\n    return (\n        <div className='main'>\n            <NavBar />\n            <Container\n                style={{\n                    margin: '0',\n                    maxWidth: '100%'\n                }}\n            >\n                <Row>\n                    <Col xs={10} sm={3} lg={3}>\n                        <TasksList\n                            filter='OPEN'\n                            items={tasks}\n                            onDeleteTask={deleteTaskHandler}\n                            onEditTask={editTaskHandler}\n                        />\n                    </Col>\n                    <Col xs={10} sm={3} lg={3}>\n                        <TasksList\n                            filter='IN_PROGRESS'\n                            items={tasks}\n                            onDeleteTask={deleteTaskHandler}\n                            onEditTask={editTaskHandler}\n                        />\n                    </Col>\n                    <Col xs={10} sm={3} lg={3}>\n                        <TasksList\n                            filter='DONE'\n                            items={tasks}\n                            onDeleteTask={deleteTaskHandler}\n                            onEditTask={editTaskHandler}\n                        />\n                    </Col>\n                    <Col xs={10} sm={3} lg={3}>\n                        <ProjectsList\n                            items={projects}\n                            onDeleteProject={deleteProjectHandler}\n                            onEditProject={editProjectHandler}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={10} sm={3} lg={3}>\n                        <CreateTaskForm onCreateTask={addTaskHandler}/>\n                    </Col>\n                    <Col>\n                    </Col>\n                    <Col>\n                    </Col>\n                    <Col xs={10} sm={3} lg={3}>\n                        <CreateProjectForm onCreateProject={addProjectHandler}/>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default PTMContainer;","import {EditTaskDto} from \"../../edit-task.dto\";\nimport {Task} from \"../../task.model\";\nimport {TaskStatus} from \"../../task.status.enum\";\nimport {EditProjectDto} from \"../../edit-project.dto\";\nimport {Project} from \"../../project.model\";\n\nexport function updateTaskValues(editTaskDto: EditTaskDto, task: Task) {\n    if (editTaskDto.title) {\n        task.title = editTaskDto.title;\n    }\n\n    if (editTaskDto.description) {\n        task.description = editTaskDto.description;\n    }\n\n    if (editTaskDto.projectId) {\n        task.projectId = editTaskDto.projectId;\n    }\n\n    if (editTaskDto.status) {\n        // @ts-ignore\n        task.status = TaskStatus[editTaskDto.status];\n    }\n}\n\nexport function updateProjectValues(editProjectDto: EditProjectDto, project: Project) {\n    if (editProjectDto.title) {\n        project.title = editProjectDto.title;\n    }\n\n    if (editProjectDto.description) {\n        project.description = editProjectDto.description;\n    }\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PTMContainer from \"./components/PTMContainer/PTMContainer\";\n\nconst App: React.FC = () => {\n    return (\n        <div className='App'>\n            <PTMContainer />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}