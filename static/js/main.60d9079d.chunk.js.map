{"version":3,"sources":["components/EditTaskForm.tsx","components/TaskForm.tsx","components/TasksList.tsx","components/CreateTaskForm.tsx","components/PTMContainer/PTMContainer.tsx","components/PTMContainer/PtmContainerFunctions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditTaskForm","props","titleRef","useRef","descriptionRef","statusRef","projectRef","Card","style","width","margin","padding","border","text","Form","onSubmit","event","preventDefault","editTaskDto","id","task","title","current","value","description","status","projectId","changeVisibility","Group","controlId","Label","Control","type","placeholder","defaultValue","ref","Button","variant","size","TaskForm","useState","isEditable","setEditable","displayForm","onEdit","onEditTask","Body","Title","Text","onClick","onDeleteTask","bind","TasksList","Container","Row","filter","items","map","CreateTaskForm","titleInputRef","descriptionInputRef","projectInputRef","createTaskDto","onCreateTask","PTMContainer","tasks","setTasks","editTaskHandler","taskIndex","findIndex","updateTaskValues","newTasks","deleteTaskHandler","taskId","prevTasks","className","Col","xs","sm","lg","Math","random","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60d9079d.chunk.js","sourcesContent":["import React, {useRef} from \"react\";\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Task} from \"../task.model\";\nimport {EditTaskDto} from \"../edit-task.dto\";\n\ninterface EditTaskProps {\n    task: Task;\n    onSubmit: (editTaskDto: EditTaskDto) => void;\n    changeVisibility: () => void;\n}\n\nconst EditTaskForm: React.FC<EditTaskProps> = (props) => {\n    const titleRef = useRef<HTMLInputElement>(null);\n    const descriptionRef = useRef<HTMLInputElement>(null);\n    const statusRef = useRef<HTMLInputElement>(null);\n    const projectRef = useRef<HTMLInputElement>(null);\n    const editTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editTaskDto: EditTaskDto = {\n            id: props.task.id,\n            title: titleRef.current!.value,\n            description: descriptionRef.current!.value,\n            status: statusRef.current!.value,\n            projectId: projectRef.current!.value\n        };\n        props.onSubmit(editTaskDto);\n        props.changeVisibility();\n    };\n    return (\n        <Card\n            style={{\n                width: '100%',\n                margin: '1%',\n                padding: '1%'\n            }}\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editTaskHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's title\"\n                        defaultValue={props.task.title}\n                        ref={titleRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's description\"\n                        defaultValue={props.task.description}\n                        ref={descriptionRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formStatus\">\n                    <Form.Label>Status</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's status\"\n                        defaultValue={props.task.status}\n                        ref={statusRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formProject\">\n                    <Form.Label>Project</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's project\"\n                        defaultValue={props.task.projectId}\n                        ref={projectRef}/>\n                </Form.Group>\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditTaskForm;","import React, {useState} from 'react';\nimport {Card, Button} from \"react-bootstrap\";\nimport EditTaskForm from \"./EditTaskForm\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {Task} from \"../task.model\";\n\ninterface TaskProps {\n    task: Task;\n    onDeleteTask: (taskId: string) => void;\n    onEditTask: (editTaskDto: EditTaskDto) => void;\n}\n\nconst TaskForm: React.FC<TaskProps> = props => {\n    const [isEditable, setEditable] = useState<boolean>(false);\n    let displayForm = null;\n    const onEdit = () => {\n        setEditable(!isEditable);\n    };\n\n    if (isEditable) {\n        displayForm = (<EditTaskForm task={props.task} onSubmit={props.onEditTask} changeVisibility={onEdit}/>);\n\n    } else {\n        displayForm = (\n            <Card\n                border=\"info\"\n                text=\"info\"\n            >\n                <Card.Body>\n                    <Card.Title>{props.task.title}</Card.Title>\n                    <Card.Text>\n                        {props.task.description}\n                    </Card.Text>\n                    <Card.Text>\n                        {props.task.projectId}\n                    </Card.Text>\n                    <Card.Text>\n                        {props.task.status}\n                    </Card.Text>\n                    <Button\n                        style={{margin: '1%'}}\n                        variant=\"outline-info\"\n                        onClick={() => onEdit()}\n                        size='sm'\n                    >\n                        Edit\n                    </Button>\n                    <Button\n                        variant=\"outline-info\"\n                        onClick={props.onDeleteTask.bind(null, props.task.id)}\n                        size='sm'\n                    >\n                        Delete\n                    </Button>\n                </Card.Body>\n            </Card>\n        );\n    }\n\n    return (\n        <div style={{\n            width: '100%',\n            margin: '1%'\n        }}>\n            {displayForm}\n        </div>\n    );\n};\n\nexport default TaskForm;","import React from 'react';\nimport TaskForm from \"./TaskForm\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport { Container, Row } from 'react-bootstrap';\nimport {Task} from \"../task.model\";\n\ninterface TasksListProps {\n    // @ts-ignore\n    items: Task [];\n    onDeleteTask: (taskId: string) => void;\n    onEditTask: (editTaskDto: EditTaskDto) => void;\n    filter: string\n}\n\nconst TasksList: React.FC<TasksListProps> = props => {\n\n    return (\n        <Container>\n            <Row>\n                {props.filter}\n            </Row>\n                {props.items\n                    .filter(task => task.status === props.filter)\n                    .map(task =>\n                    <Row>\n                        <TaskForm task={task} onDeleteTask={props.onDeleteTask} onEditTask={props.onEditTask}/>\n                    </Row>)}\n        </Container>\n    );\n};\n\nexport default TasksList;","import React, {useRef} from 'react';\nimport {Form, Button, Card} from 'react-bootstrap';\nimport {CreateTaskDto} from \"../create-task.dto\";\ninterface CreateTaskProps {\n    onCreateTask: (createTaskDto: CreateTaskDto) => void;\n}\n\nconst CreateTaskForm: React.FC<CreateTaskProps> = props => {\n    const titleInputRef = useRef<HTMLInputElement>(null);\n    const descriptionInputRef = useRef<HTMLInputElement>(null);\n    const projectInputRef = useRef<HTMLInputElement>(null);\n    const createTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const createTaskDto: CreateTaskDto = {\n            title: titleInputRef.current!.value,\n            description: descriptionInputRef.current!.value,\n            projectId: projectInputRef.current!.value\n        };\n        props.onCreateTask(createTaskDto);\n    };\n    return (\n            <Card\n                style={{\n                    padding: '2%',\n                    width: '100%'\n                }}\n                border=\"info\"\n                text=\"info\"\n            >\n                <Form onSubmit={createTaskHandler}>\n                    <Form.Group controlId=\"formTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's title\" ref={titleInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's description\" ref={descriptionInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formProject\">\n                        <Form.Label>Project</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's project\" ref={projectInputRef}/>\n                    </Form.Group>\n                    <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                        Create task\n                    </Button>\n                </Form>\n            </Card>\n    );\n};\n\nexport default CreateTaskForm;","import React, {useState} from \"react\";\nimport {Container, Row, Col} from \"react-bootstrap\";\nimport {Task} from \"../../task.model\";\nimport {CreateTaskDto} from \"../../create-task.dto\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport TasksList from \"../TasksList\";\nimport CreateTaskForm from \"../CreateTaskForm\";\nimport {updateTaskValues} from \"./PtmContainerFunctions\";\n\n\nconst PTMContainer: React.FC = () => {\n    const [tasks, setTasks] = useState<Task[]>([]);\n\n    const addTaskHandler = (createTaskDto: CreateTaskDto) => {\n        setTasks(\n            prevTasks =>\n                [...prevTasks,\n                    {\n                        id: Math.random().toString(),\n                        title: createTaskDto.title,\n                        description: createTaskDto.description,\n                        projectId: createTaskDto.projectId,\n                        status: 'OPEN'\n                    }\n                ]\n        );\n    };\n\n    const editTaskHandler = (editTaskDto: EditTaskDto) => {\n        const taskIndex = tasks.findIndex(task => task.id === editTaskDto.id);\n\n        const task: Task = {...tasks[taskIndex]};\n        updateTaskValues(editTaskDto, task);\n\n        const newTasks = [...tasks];\n        newTasks[taskIndex] = task;\n\n        setTasks(newTasks);\n    }\n\n    const deleteTaskHandler = (taskId: string) => {\n        setTasks(prevTasks => {\n            return prevTasks.filter(task => task.id !== taskId);\n        });\n    };\n\n    return (\n        <div className='main'>\n            <Container>\n                <Row>\n                    <h3>Todo app</h3>\n                </Row>\n                <Row>\n                    <Col xs={10} sm={4} lg={4}>\n                        <TasksList\n                            filter='OPEN'\n                            items={tasks}\n                            onDeleteTask={deleteTaskHandler}\n                            onEditTask={editTaskHandler}\n                        />\n                    </Col>\n                    <Col xs={10} sm={4} lg={4}>\n                        <TasksList\n                            filter='IN_PROGRESS'\n                            items={tasks}\n                            onDeleteTask={deleteTaskHandler}\n                            onEditTask={editTaskHandler}\n                        />\n                    </Col>\n                    <Col xs={10} sm={4} lg={4}>\n                        <TasksList\n                            filter='DONE'\n                            items={tasks}\n                            onDeleteTask={deleteTaskHandler}\n                            onEditTask={editTaskHandler}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={10} sm={4} lg={4}>\n                        <CreateTaskForm onCreateTask={addTaskHandler}/>\n                    </Col>\n                    <Col>\n                    </Col>\n                    <Col>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default PTMContainer;","import {EditTaskDto} from \"../../edit-task.dto\";\nimport {Task} from \"../../task.model\";\n\nexport function updateTaskValues(editTaskDto: EditTaskDto, task: Task) {\n    if (editTaskDto.title) {\n        task.title = editTaskDto.title;\n    }\n\n    if (editTaskDto.description) {\n        task.description = editTaskDto.description;\n    }\n\n    if (editTaskDto.projectId) {\n        task.projectId = editTaskDto.projectId;\n    }\n\n    if (editTaskDto.status) {\n        task.status = editTaskDto.status;\n    }\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PTMContainer from \"./components/PTMContainer/PTMContainer\";\n\nconst App: React.FC = () => {\n    return (\n        <div className='App'>\n            <PTMContainer />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}