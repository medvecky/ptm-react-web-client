{"version":3,"sources":["task.status.enum.ts","components/CreateTaskForm/CreateTaskForm.tsx","components/NavBar.tsx","components/EditTaskStatusForm.tsx","components/TaskForm.tsx","components/TasksList/TasksList.tsx","components/TasksList/TaskListFunction.ts","components/ProjectForm.tsx","components/ProjectsList.tsx","components/ListsContainer.tsx","components/CreateProjectForm/CreateProjectForm.tsx","components/EditTaskForm/EditTaskForm.tsx","components/EditProjectForm/EditProjectForm.tsx","components/NavBarNoAuth.tsx","components/SignInForm/SignInForm.tsx","components/PTMContainer/PTMContainer.tsx","components/PTMContainer/PtmContainerFunctions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskStatus","CreateTaskForm","props","titleInputRef","useRef","descriptionInputRef","projectInputRef","history","useHistory","Card","className","border","text","Form","onSubmit","event","preventDefault","createTaskDto","title","current","value","description","projectId","onCreateTask","push","Group","controlId","Label","Control","type","placeholder","ref","Button","variant","size","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","as","NavLink","to","exact","NavDropdown","Item","Divider","onClick","onSignOut","EditTaskStatusForm","statusRef","style","width","margin","padding","editTaskDto","task","status","changeVisibility","defaultValue","OPEN","IN_PROGRESS","DONE","TaskForm","useState","isEditable","setEditable","displayForm","onEdit","onEditTask","Body","Title","key","color","Text","onDeleteTask","bind","TasksList","tasks","projectFilter","statusFilter","taskListElements","items","project","filter","map","Row","Container","maxWidth","Badge","ProjectForm","onChangeFilter","onDeleteProject","ProjectsList","onEditProject","ListsContainer","Col","xs","sm","lg","deleteTaskHandler","editTaskHandler","projects","deleteProjectHandler","editProjectHandler","setProjectFilter","CreateProjectForm","createProjectDto","onCreateProject","onClearFilter","EditTaskForm","titleRef","descriptionRef","projectRef","EditProjectForm","editProjectDto","NavBarNoAuth","SignInForm","loginInputRef","passwordInputRef","login","password","onSingIn","withRouter","setTasks","setProjects","token","setToken","addTaskHandler","prevTasks","Math","random","toString","addProjectHandler","prevProjects","taskIndex","findIndex","updateTaskValues","newTasks","projectIndex","updateProjectValues","newProjects","taskId","signInHandler","signIn","path","component","find","match","params","console","log","from","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e67fd14c.chunk.js","sourcesContent":["export enum TaskStatus {\n    OPEN = 'OPEN',\n    IN_PROGRESS = 'IN_PROGRESS',\n    DONE = 'DONE'\n}","import React, {useRef} from 'react';\nimport './CreateTask.css';\nimport {Form, Button, Card} from 'react-bootstrap';\nimport {CreateTaskDto} from \"../../create-task.dto\";\nimport {useHistory} from \"react-router\";\ninterface CreateTaskProps {\n    onCreateTask: (createTaskDto: CreateTaskDto) => void;\n}\n\nconst CreateTaskForm: React.FC<CreateTaskProps> = props => {\n    const titleInputRef = useRef<HTMLInputElement>(null);\n    const descriptionInputRef = useRef<HTMLInputElement>(null);\n    const projectInputRef = useRef<HTMLInputElement>(null);\n    const history = useHistory();\n    const createTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const createTaskDto: CreateTaskDto = {\n            title: titleInputRef.current!.value,\n            description: descriptionInputRef.current!.value,\n            projectId: projectInputRef.current!.value\n        };\n        props.onCreateTask(createTaskDto);\n        history.push('/');\n    };\n    return (\n            <Card\n                className='CreateTask'\n                border=\"info\"\n                text=\"info\"\n            >\n                <Form onSubmit={createTaskHandler}>\n                    <Form.Group controlId=\"formTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's title\" ref={titleInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's description\" ref={descriptionInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formProject\">\n                        <Form.Label>Project</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter task's project\" ref={projectInputRef}/>\n                    </Form.Group>\n                    <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                        Create task\n                    </Button>\n                </Form>\n            </Card>\n    );\n};\n\nexport default CreateTaskForm;","import React from 'react';\nimport {Button, Nav, Navbar, NavDropdown} from \"react-bootstrap\";\nimport {NavLink, useHistory} from 'react-router-dom';\n\ninterface  NavBarProps {\n    onSignOut: () => void\n}\n\nconst NavBar: React.FC<NavBarProps> = (props) => {\n    const history = useHistory();\n\n    const signOutHandler = () => {\n        props.onSignOut();\n        history.push('/');\n    };\n\n    return (\n        <Navbar bg=\"info\" variant='dark' expand='md'>\n            <Navbar.Brand href=\"#home\">PTM</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link\n                        as={NavLink}\n                        to='/'\n                        exact\n                    >\n                        Home\n                    </Nav.Link>\n                    <Nav.Link as={NavLink} to='/new-task'>New Task</Nav.Link>\n                    <Nav.Link as={NavLink} to='/new-project'>New Project</Nav.Link>\n                    <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#action/3.1\">Reports</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                        <NavDropdown.Divider/>\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n                <Nav>\n                    <Button\n                        variant=\"outline-light\"\n                        type=\"submit\" size='sm'\n                        onClick={signOutHandler}\n                    >\n                       Sign Out\n                    </Button>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n\nexport default NavBar;","import React, {useRef} from \"react\";\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Task} from \"../task.model\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {TaskStatus} from \"../task.status.enum\";\n\ninterface EditTaskStatusProps {\n    task: Task;\n    onSubmit: (editTaskDto: EditTaskDto) => void;\n    changeVisibility: () => void;\n}\n\nconst EditTaskStatusForm: React.FC<EditTaskStatusProps> = (props) => {\n    const statusRef = useRef<HTMLSelectElement>(null);\n    const editTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editTaskDto: EditTaskDto = {\n            id: props.task.id,\n            title: props.task.title,\n            description: props.task.description,\n            status: statusRef.current!.value,\n            projectId: props.task.projectId\n        };\n        props.onSubmit(editTaskDto);\n        props.changeVisibility();\n    };\n    return (\n        <Card\n            style={{\n                width: '100%',\n                margin: '1%',\n                padding: '2%'\n            }}\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editTaskHandler}>\n                <Form.Group>\n                    <Form.Label>{props.task.title}</Form.Label>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>{props.task.description}</Form.Label>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>{props.task.projectId}</Form.Label>\n                </Form.Group>\n                <Form.Group controlId=\"formStatus\">\n                    <Form.Control as=\"select\" defaultValue={props.task.status} ref={statusRef}>\n                        <option>{TaskStatus.OPEN}</option>\n                        <option>{TaskStatus.IN_PROGRESS}</option>\n                        <option>{TaskStatus.DONE}</option>\n                    </Form.Control>\n                </Form.Group>\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditTaskStatusForm;","import React, {useState} from 'react';\nimport {Card, Button} from \"react-bootstrap\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {Task} from \"../task.model\";\nimport {Link} from \"react-router-dom\";\nimport EditTaskStatusForm from \"./EditTaskStatusForm\";\n\ninterface TaskProps {\n    task: Task;\n    onDeleteTask: (taskId: string) => void;\n    onEditTask: (editTaskDto: EditTaskDto) => void;\n}\n\nconst TaskForm: React.FC<TaskProps> = props => {\n    const [isEditable, setEditable] = useState<boolean>(false);\n    let displayForm = null;\n    const onEdit = () => {\n        setEditable(!isEditable);\n    };\n\n    if (isEditable) {\n        displayForm = (<EditTaskStatusForm task={props.task} onSubmit={props.onEditTask} changeVisibility={onEdit}/>);\n\n    } else {\n        displayForm = (\n            <Card\n                border=\"info\"\n                text=\"info\"\n            >\n                <Card.Body>\n                    <Card.Title\n                        as={Link}\n                        to={'/task/' + props.task.id}\n                        key={props.task.id}\n                        style={{\n                            color: \"lightseagreen\"\n                        }}\n                    >\n                        {props.task.title}\n                    </Card.Title>\n                    <Card.Text>\n                        {props.task.description}\n                    </Card.Text>\n                    <Card.Text>\n                        {props.task.projectId}\n                    </Card.Text>\n                    <Card.Text>\n                        {props.task.status}\n                    </Card.Text>\n                    <Button\n                        style={{margin: '1%'}}\n                        variant=\"outline-info\"\n                        onClick={() => onEdit()}\n                        size='sm'\n                    >\n                        Edit\n                    </Button>\n                    <Button\n                        variant=\"outline-info\"\n                        onClick={props.onDeleteTask.bind(null, props.task.id)}\n                        size='sm'\n                    >\n                        Delete\n                    </Button>\n                </Card.Body>\n            </Card>\n        );\n    }\n    return (\n        <div style={{\n            width: '100%',\n            margin: '1%'\n        }}>\n            {displayForm}\n        </div>\n    );\n};\n\nexport default TaskForm;","import React from 'react';\nimport TaskForm from \"../TaskForm\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport {Container, Row, Badge} from 'react-bootstrap';\nimport {Task} from \"../../task.model\";\nimport {filterTasks} from \"./TaskListFunction\";\ninterface TasksListProps {\n    // @ts-ignore\n    items: Task [];\n    onDeleteTask: (taskId: string) => void;\n    onEditTask: (editTaskDto: EditTaskDto) => void;\n    status: string;\n    project: string;\n}\n\n\n\nconst TasksList: React.FC<TasksListProps> = props => {\n\n    const taskListItems = filterTasks(props.items, props.project, props.status);\n\n    const taskListElements = taskListItems.map(task =>\n        <Row>\n            <TaskForm task={task} onDeleteTask={props.onDeleteTask} onEditTask={props.onEditTask}/>\n        </Row>);\n\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            <Row>\n                <h4><Badge variant=\"info\">{props.status}</Badge></h4>\n            </Row>\n            {taskListElements}\n        </Container>\n    );\n};\n\nexport default TasksList;","import {Task} from \"../../task.model\";\n\nexport function filterTasks(tasks: Task [], projectFilter: string, statusFilter: string) {\n\n    let result;\n\n    if (projectFilter) {\n        if (projectFilter === '-') {\n            result = tasks\n                .filter(task => task.status === statusFilter)\n                .filter(task => task.projectId === \"\");\n        } else {\n            result = tasks\n                .filter(task => task.status === statusFilter)\n                .filter(task => task.projectId === projectFilter);\n        }\n    } else {\n        result = tasks.filter(task => task.status === statusFilter);\n    }\n    return result;\n}","import React from 'react';\nimport {Card, Button} from \"react-bootstrap\";\nimport {Project} from \"../project.model\";\nimport {EditProjectDto} from \"../edit-project.dto\";\nimport {Link} from \"react-router-dom\";\n\ninterface ProjectProps {\n    project: Project;\n    onDeleteProject: (projectId: string) => void;\n    onEditProject: (editProjectDto: EditProjectDto) => void;\n    onChangeFilter: (filter: string) => void;\n}\n\nconst ProjectForm: React.FC<ProjectProps> = props => {\n    return (\n        <Card\n            border=\"info\"\n            text=\"info\"\n        >\n            <Card.Body>\n                <Card.Title\n                    onClick={() => props.onChangeFilter(props.project.title)}\n                >\n                    {props.project.title}\n                </Card.Title>\n                <Card.Text>\n                    {props.project.description}\n                </Card.Text>\n                <Button\n                    as={Link}\n                    to={'/project/' + props.project.id}\n                    key = {props.project.id}\n                    variant=\"outline-info\"\n                    size='sm'\n                >\n                    Edit\n                </Button>\n                <Button\n                    variant=\"outline-info\"\n                    onClick={props.onDeleteProject.bind(null, props.project.id)}\n                    size='sm'\n                >\n                    Delete\n                </Button>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default ProjectForm;","import React from 'react';\nimport {Container, Row, Badge, Button} from 'react-bootstrap';\nimport {EditProjectDto} from \"../edit-project.dto\";\nimport ProjectForm from \"./ProjectForm\";\nimport {Project} from \"../project.model\";\n\ninterface ProjectsListProps {\n    // @ts-ignore\n    items: Project [];\n    onDeleteProject: (projectId: string) => void;\n    onEditProject: (editProjectDto: EditProjectDto) => void;\n    onChangeFilter: (filter: string) => void;\n}\n\nconst ProjectsList: React.FC<ProjectsListProps> = props => {\n\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            <Row>\n                <h4><Badge variant=\"info\">PROJECTS</Badge></h4>\n            </Row>\n            <Row>\n                <Row>\n                    <Button\n                        style={{margin: '1px'}}\n                        variant=\"outline-info\"\n                        size='sm'\n                        onClick={() => props.onChangeFilter('')}\n                    >\n                        Clear Filter\n                    </Button>\n                    <Button\n                        style={{margin: '1px'}}\n                        variant=\"outline-info\"\n                        size='sm'\n                        onClick={() => props.onChangeFilter('-')}\n                    >\n                        Tasks without project\n                    </Button>\n                </Row>\n            </Row>\n                {props.items\n                    .map(project =>\n                    <Row>\n                        <ProjectForm\n                            project={project}\n                            onDeleteProject={props.onDeleteProject}\n                            onEditProject={props.onEditProject}\n                            onChangeFilter={props.onChangeFilter}\n                        />\n                    </Row>)}\n        </Container>\n    );\n};\n\nexport default ProjectsList;","import React from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport TasksList from \"./TasksList/TasksList\";\nimport ProjectsList from \"./ProjectsList\";\nimport {Task} from \"../task.model\";\nimport {EditTaskDto} from \"../edit-task.dto\";\nimport {Project} from \"../project.model\";\nimport {EditProjectDto} from \"../edit-project.dto\";\n\ntype ListsContainerProps = {\n    tasks: Task [];\n    projects: Project [];\n    deleteTaskHandler: (taskId: string) => void;\n    editTaskHandler: (editTaskDto: EditTaskDto) => void;\n    projectFilter: string;\n    deleteProjectHandler: (projectId: string) => void;\n    setProjectFilter: (project: string) => void;\n    editProjectHandler: (editProjectDto: EditProjectDto) => void;\n}\n\nconst ListsContainer: React.FC<ListsContainerProps> = (props) => {\n    return (\n        <Container\n            style={{\n                margin: '0',\n                maxWidth: '100%'\n            }}\n        >\n            <Row>\n                <Col xs={10} sm={3} lg={3}>\n                    <TasksList\n                        status='OPEN'\n                        items={props.tasks}\n                        onDeleteTask={props.deleteTaskHandler}\n                        onEditTask={props.editTaskHandler}\n                        project={props.projectFilter}\n                    />\n                </Col>\n                <Col xs={10} sm={3} lg={3}>\n                    <TasksList\n                        status='IN_PROGRESS'\n                        items={props.tasks}\n                        onDeleteTask={props.deleteTaskHandler}\n                        onEditTask={props.editTaskHandler}\n                        project={props.projectFilter}\n                    />\n                </Col>\n                <Col xs={10} sm={3} lg={3}>\n                    <TasksList\n                        status='DONE'\n                        items={props.tasks}\n                        onDeleteTask={props.deleteTaskHandler}\n                        onEditTask={props.editTaskHandler}\n                        project={props.projectFilter}\n                    />\n                </Col>\n                <Col xs={10} sm={3} lg={3}>\n                    <ProjectsList\n                        items={props.projects}\n                        onDeleteProject={props.deleteProjectHandler}\n                        onEditProject={props.editProjectHandler}\n                        onChangeFilter={props.setProjectFilter}\n                    />\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default ListsContainer;","import React, {useRef} from 'react'\nimport './CreateProjectForm.css'\nimport {Form, Button, Card} from 'react-bootstrap';\nimport {CreateProjectDto} from \"../../create-project.dto\";\nimport {useHistory} from \"react-router\";\ninterface CreateProjectProps {\n    onCreateProject: (createProjectDto: CreateProjectDto) => void;\n    onClearFilter: (filter: string) => void;\n}\n\nconst CreateProjectForm: React.FC<CreateProjectProps> = props => {\n    const titleInputRef = useRef<HTMLInputElement>(null);\n    const descriptionInputRef = useRef<HTMLInputElement>(null);\n    const history = useHistory();\n    const createProjectHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const createProjectDto: CreateProjectDto = {\n\n            title: titleInputRef.current!.value,\n            description: descriptionInputRef.current!.value,\n        };\n        props.onCreateProject(createProjectDto);\n        history.push('/');\n    };\n    return (\n            <Card\n                className='CreateProjectForm'\n                border=\"info\"\n                text=\"info\"\n            >\n                <Form onSubmit={createProjectHandler}>\n                    <Form.Group controlId=\"formTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter project's title\" ref={titleInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter projects's description\" ref={descriptionInputRef}/>\n                    </Form.Group>\n                    <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                        Create Project\n                    </Button>\n                    <Button\n                        style = {{margin: '1px'}}\n                        variant=\"outline-info\"\n                        size='sm'\n                        onClick={() => props.onClearFilter('')}\n                    >\n                        Clear filter\n                    </Button>\n                </Form>\n            </Card>\n    );\n};\n\nexport default CreateProjectForm;","import React, {useRef} from \"react\";\nimport './EditTaskForm.css'\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Task} from \"../../task.model\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport {TaskStatus} from \"../../task.status.enum\";\nimport {useHistory} from \"react-router\";\n\ninterface EditTaskProps {\n    task: Task;\n    onSubmit: (editTaskDto: EditTaskDto) => void;\n}\n\nconst EditTaskForm: React.FC<EditTaskProps> = (props) => {\n    const titleRef = useRef<HTMLInputElement>(null);\n    const descriptionRef = useRef<HTMLInputElement>(null);\n    const statusRef = useRef<HTMLSelectElement>(null);\n    const projectRef = useRef<HTMLInputElement>(null);\n    const history = useHistory();\n    const editTaskHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editTaskDto: EditTaskDto = {\n            id: props.task.id,\n            title: titleRef.current!.value,\n            description: descriptionRef.current!.value,\n            status: statusRef.current!.value,\n            projectId: projectRef.current!.value\n        };\n        props.onSubmit(editTaskDto);\n        history.push('/');\n    };\n    return (\n        <Card\n            className='EditTaskForm'\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editTaskHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's title\"\n                        defaultValue={props.task.title}\n                        ref={titleRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's description\"\n                        defaultValue={props.task.description}\n                        ref={descriptionRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formStatus\">\n                    <Form.Label>Status</Form.Label>\n                    <Form.Control as=\"select\" defaultValue={props.task.status} ref={statusRef}>\n                        <option>Choose...</option>\n                        <option>{TaskStatus.OPEN}</option>\n                        <option>{TaskStatus.IN_PROGRESS}</option>\n                        <option>{TaskStatus.DONE}</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group controlId=\"formProject\">\n                    <Form.Label>Project</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter task's project\"\n                        defaultValue={props.task.projectId}\n                        ref={projectRef}/>\n                </Form.Group>\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditTaskForm;","import React, {useRef} from \"react\";\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {Project} from \"../../project.model\";\nimport {EditProjectDto} from \"../../edit-project.dto\";\nimport './EditProjectForm.css';\nimport {useHistory} from \"react-router\";\n\ninterface EditProjectProps {\n    project: Project;\n    onSubmit: (editProjectDto: EditProjectDto) => void;\n}\n\nconst EditProjectForm: React.FC<EditProjectProps> = (props) => {\n    const titleRef = useRef<HTMLInputElement>(null);\n    const descriptionRef = useRef<HTMLInputElement>(null);\n    const history = useHistory();\n    const editProjectHandler = (event: React.FormEvent) => {\n        event.preventDefault();\n        const editProjectDto: EditProjectDto = {\n            id: props.project.id,\n            title: titleRef.current!.value,\n            description: descriptionRef.current!.value\n        };\n        props.onSubmit(editProjectDto);\n        history.push('/');\n    };\n    return (\n        <Card\n            className='EditProjectForm'\n            border=\"info\"\n            text=\"info\"\n        >\n            <Form onSubmit={editProjectHandler}>\n                <Form.Group controlId=\"formTitle\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter projects's title\"\n                        defaultValue={props.project.title}\n                        ref={titleRef}/>\n                </Form.Group>\n                <Form.Group controlId=\"formDescription\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter project's description\"\n                        defaultValue={props.project.description}\n                        ref={descriptionRef}/>\n                </Form.Group>\n                <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                    Save changes\n                </Button>\n            </Form>\n        </Card>\n    );\n};\n\nexport default EditProjectForm;","import React from 'react';\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport {NavLink} from 'react-router-dom';\n\nconst NavBarNoAuth: React.FC = () => {\n    return (\n        <Navbar bg=\"info\" variant='dark' expand='md'>\n            <Navbar.Brand href=\"#home\">PTM</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                </Nav>\n                <Nav>\n                    <Nav.Link as={NavLink} to='/signin' exact>Sign In</Nav.Link>\n                    <Nav.Link as={NavLink} to='/signup'>Sign Up</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n};\n\nexport default NavBarNoAuth;","import React, {useRef} from 'react';\nimport './SignInForm.css';\nimport {Form, Button, Card} from 'react-bootstrap';\nimport {useHistory} from \"react-router\";\ninterface SignInProps {\n    onSingIn: (login: string, password: string) => void;\n}\n\nconst SignInForm: React.FC<SignInProps> = props => {\n    const loginInputRef = useRef<HTMLInputElement>(null);\n    const passwordInputRef = useRef<HTMLInputElement>(null);\n    const history = useHistory();\n    const signInHandler = (event: React.FormEvent) => {\n        const login = loginInputRef.current!.value;\n        const password = passwordInputRef.current!.value;\n        event.preventDefault();\n        props.onSingIn(login, password);\n        history.push('/');\n    };\n    return (\n            <Card\n                className='CreateTask'\n                border=\"info\"\n                text=\"info\"\n            >\n                <Form onSubmit={signInHandler}>\n                    <Form.Group controlId=\"formLogin\">\n                        <Form.Label>Login</Form.Label>\n                        <Form.Control type=\"text\" ref={loginInputRef}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"text\"  ref={passwordInputRef}/>\n                    </Form.Group>\n                    <Button variant=\"outline-info\" type=\"submit\" size='sm'>\n                        Sign In\n                    </Button>\n                </Form>\n            </Card>\n    );\n};\n\nexport default SignInForm;","import React, {useState} from \"react\";\nimport {Task} from \"../../task.model\";\nimport {CreateTaskDto} from \"../../create-task.dto\";\nimport {EditTaskDto} from \"../../edit-task.dto\";\nimport CreateTaskForm from \"../CreateTaskForm/CreateTaskForm\";\nimport {updateProjectValues, updateTaskValues} from \"./PtmContainerFunctions\";\nimport {TaskStatus} from \"../../task.status.enum\";\nimport NavBar from \"../NavBar\";\nimport {Project} from \"../../project.model\";\nimport {CreateProjectDto} from \"../../create-project.dto\";\nimport {EditProjectDto} from \"../../edit-project.dto\";\nimport ListsContainer from \"../ListsContainer\";\nimport CreateProjectForm from \"../CreateProjectForm/CreateProjectForm\";\nimport {Redirect, Route, Switch, withRouter} from \"react-router\";\nimport EditTaskForm from \"../EditTaskForm/EditTaskForm\";\nimport EditProjectForm from \"../EditProjectForm/EditProjectForm\";\nimport NavBarNoAuth from \"../NavBarNoAuth\";\nimport SignInForm from \"../SignInForm/SignInForm\";\n\n\nconst PTMContainer: React.FC = (props) => {\n    const [tasks, setTasks] = useState<Task[]>([]);\n    const [projects, setProjects] = useState<Project[]>([]);\n    const [projectFilter, setProjectFilter] = useState<string>('');\n    const [token, setToken] = useState<string>('');\n\n    const addTaskHandler = (createTaskDto: CreateTaskDto) => {\n        setTasks(\n            prevTasks =>\n                [...prevTasks,\n                    {\n                        id: Math.random().toString(),\n                        title: createTaskDto.title,\n                        description: createTaskDto.description,\n                        projectId: createTaskDto.projectId,\n                        status: TaskStatus.OPEN\n                    }\n                ]\n        );\n    };\n\n    const addProjectHandler = (createProjectDto: CreateProjectDto) => {\n        setProjects(\n            prevProjects =>\n                [...prevProjects,\n                    {\n                        id: Math.random().toString(),\n                        title: createProjectDto.title,\n                        description: createProjectDto.description\n                    }\n                ]\n        );\n    };\n\n    const editTaskHandler = (editTaskDto: EditTaskDto) => {\n        const taskIndex = tasks.findIndex(task => task.id === editTaskDto.id);\n\n        const task: Task = {...tasks[taskIndex]};\n        updateTaskValues(editTaskDto, task);\n\n        const newTasks = [...tasks];\n        newTasks[taskIndex] = task;\n\n        setTasks(newTasks);\n    }\n\n    const editProjectHandler = (editProjectDto: EditProjectDto) => {\n        const projectIndex = projects.findIndex(project => project.id === editProjectDto.id);\n\n        const project: Project = {...projects[projectIndex]};\n        updateProjectValues(editProjectDto, project);\n\n        const newProjects = [...projects];\n        newProjects[projectIndex] = project;\n\n        setProjects(newProjects);\n    }\n\n    const deleteTaskHandler = (taskId: string) => {\n        setTasks(prevTasks => {\n            return prevTasks.filter(task => task.id !== taskId);\n        });\n    };\n\n    const deleteProjectHandler = (projectId: string) => {\n        setProjects(prevProjects => {\n            return prevProjects.filter(project => project.id !== projectId);\n        });\n    };\n\n    const signInHandler = (login: string, password: string) => {\n        if (login === 'admin' && password === 'admin') {\n            setToken('xxxx');\n        }\n    };\n\n    const signOutHandler = () => {\n        setToken('');\n    };\n\n    const lists = () => (\n        <ListsContainer\n            tasks={tasks}\n            projects={projects}\n            projectFilter={projectFilter}\n            deleteTaskHandler={deleteTaskHandler}\n            editTaskHandler={editTaskHandler}\n            deleteProjectHandler={deleteProjectHandler}\n            editProjectHandler={editProjectHandler}\n            setProjectFilter={setProjectFilter}\n        />\n    );\n\n    const createTask = () => (\n        <CreateTaskForm onCreateTask={addTaskHandler}/>\n    );\n\n    const createProject = () => (\n        <CreateProjectForm onCreateProject={addProjectHandler} onClearFilter={setProjectFilter}/>\n    );\n\n    const editTask = (props: any) => {\n        const task = tasks.find(task => task.id === props.match.params.id)\n        if (task) {\n            return (\n                <EditTaskForm task={task} onSubmit={editTaskHandler}/>\n            );\n        } else {\n            return (\n                <h4>Task with id: {props.match.params.id} not found</h4>\n            );\n        }\n    };\n\n    const editProject = (props: any) => {\n        console.log('editProject', props)\n        const project = projects.find(project => project.id === props.match.params.id)\n        if (project) {\n            return (\n                <EditProjectForm project={project} onSubmit={editProjectHandler}/>\n            );\n        } else {\n            return (\n                <h4>Project with id: {props.match.params.id} not found</h4>\n            );\n        }\n    };\n\n    const signIn = (props: any) => (\n        <SignInForm onSingIn={signInHandler} />\n    );\n\n    let routes;\n\n    if (token) {\n        routes = (\n            <div className='main'>\n                <NavBar onSignOut={signOutHandler}/>\n                <Switch>\n                    <Route path=\"/\" exact component={lists}/>\n                    <Route path=\"/new-task\" exact component={createTask}/>\n                    <Route path=\"/new-project\" exact component={createProject}/>\n                    <Route path=\"/task/:id\" exact component={editTask}/>\n                    <Route path=\"/project/:id\" exact component={editProject}/>\n                    <Redirect from=\"/\" to=\"/\"/>\n                    {/*<Route render={() => <h1>Not found</h1>}/>*/}\n                </Switch>\n            </div>\n        );\n    } else {\n        routes = (\n            <div className='main'>\n                <NavBarNoAuth/>\n                <Switch>\n                    <Route path=\"/signin\" exact component={signIn}/>\n                    <Route path=\"/signup\" exact component={signIn}/>\n                    <Redirect from=\"/\" to=\"/signin\"/>\n                </Switch>\n            </div>\n        );\n    }\n\n    return (\n        routes\n    );\n};\n\nexport default withRouter(PTMContainer);","import {EditTaskDto} from \"../../edit-task.dto\";\nimport {Task} from \"../../task.model\";\nimport {TaskStatus} from \"../../task.status.enum\";\nimport {EditProjectDto} from \"../../edit-project.dto\";\nimport {Project} from \"../../project.model\";\n\nexport function updateTaskValues(editTaskDto: EditTaskDto, task: Task) {\n    if (editTaskDto.title) {\n        task.title = editTaskDto.title;\n    }\n\n    if (editTaskDto.description) {\n        task.description = editTaskDto.description;\n    }\n\n    if (editTaskDto.projectId) {\n        task.projectId = editTaskDto.projectId;\n    }\n\n    if (editTaskDto.status) {\n        // @ts-ignore\n        task.status = TaskStatus[editTaskDto.status];\n    }\n}\n\nexport function updateProjectValues(editProjectDto: EditProjectDto, project: Project) {\n    if (editProjectDto.title) {\n        project.title = editProjectDto.title;\n    }\n\n    if (editProjectDto.description) {\n        project.description = editProjectDto.description;\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PTMContainer from \"./components/PTMContainer/PTMContainer\";\nimport {HashRouter} from \"react-router-dom\";\n\nconst App: React.FC = () => {\n    return (\n        <HashRouter>\n            <div className='App'>\n                <PTMContainer/>\n            </div>\n        </HashRouter>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}